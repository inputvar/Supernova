import { ZIMManager } from './impl/ZIMManager';
import { NotInitError } from './impl/ZIMParamValid';
import { ZIMConversationType, } from './ZIMDefines';
export default class ZIM {
    constructor(engine) {
        if (!engine)
            throw new Error('Can not be use new.');
        this.engine = engine;
    }
    /**
     * Gets the SDK's version number.
     *
     * When the SDK is running, the developer finds that it does not match the expected situation and submits the problem and related logs to the ZEGO technical staff for locating. The ZEGO technical staff may need the information of the engine version to assist in locating the problem.
     * Developers can also collect this information as the version information of the engine used by the app, so that the SDK corresponding to each version of the app on the line.
     * @return {string} - SDK version
     */
    static getVersion() {
        return ZIMManager.getInstance().getVersion();
    }
    static create(appConfig) {
        const appID = typeof appConfig == 'object' ? appConfig.appID : appConfig;
        const appSign = typeof appConfig == 'object' ? appConfig.appSign : '';
        const engine = ZIMManager.getInstance().createEngine(appID, appSign);
        if (engine) {
            ZIM._instatance = new ZIM(engine);
            return ZIM._instatance;
        }
        return null;
    }
    static getInstance() {
        return ZIM._instatance;
    }
    static setLogConfig(config) {
        ZIMManager.getInstance().setLogConfig(config);
    }
    static setCacheConfig(config) {
        ZIMManager.getInstance().setCacheConfig(config);
    }
    destroy() {
        ZIMManager.getInstance().destroyEngine(this.engine);
        // @ts-ignore
        this.engine = null;
        ZIM._instatance = null;
    }
    on(type, listener) {
        this.engine && this.engine.on(type, listener);
    }
    off(type) {
        this.engine && this.engine.off(type);
    }
    uploadLog() {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.uploadLog();
    }
    // MARK: - Main
    login(userInfo, token) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.login(userInfo, token);
    }
    logout() {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.logout();
    }
    renewToken(token) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.renewToken(token);
    }
    updateUserName(userName) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateUserName(userName);
    }
    updateUserAvatarUrl(userAvatarUrl) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateUserAvatarUrl(userAvatarUrl);
    }
    updateUserExtendedData(extendedData) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateUserExtendedData(extendedData);
    }
    queryUsersInfo(userIDs, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryUsersInfo(userIDs, config);
    }
    // MARK: - Conversation
    queryConversation(conversationID, conversationType) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryConversation(conversationID, conversationType);
    }
    queryConversationList(config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryConversationList(config);
    }
    queryConversationPinnedList(config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryConversationPinnedList(config);
    }
    deleteConversation(conversationID, conversationType, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.deleteConversation(conversationID, conversationType, config);
    }
    setConversationNotificationStatus(status, conversationID, conversationType) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.setConversationNotificationStatus(status, conversationID, conversationType);
    }
    updateConversationPinnedState(isPinned, conversationID, conversationType) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateConversationPinnedState(isPinned, conversationID, conversationType);
    }
    clearConversationUnreadMessageCount(conversationID, conversationType) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.clearConversationUnreadMessageCount(conversationID, conversationType);
    }
    /**
     * @deprecated
     * Deprecated since 2.4.0, please use [sendMessage].
     */
    sendPeerMessage(message, toUserID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.sendMessage(message, toUserID, ZIMConversationType.Peer, config);
    }
    /**
     * @deprecated
     * Deprecated since 2.4.0, please use [sendMessage].
     */
    sendGroupMessage(message, toGroupID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.sendMessage(message, toGroupID, ZIMConversationType.Group, config);
    }
    /**
     * @deprecated
     * Deprecated since 2.4.0, please use [sendMessage].
     */
    sendRoomMessage(message, toRoomID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.sendMessage(message, toRoomID, ZIMConversationType.Room, config);
    }
    sendMessage(message, toConversationID, conversationType, config, notification) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.sendMessage(message, toConversationID, conversationType, config, notification);
    }
    sendMediaMessage(message, toConversationID, conversationType, config, notification) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.sendMediaMessage(message, toConversationID, conversationType, config, notification);
    }
    deleteMessages(messageList, conversationID, conversationType, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.deleteMessages(messageList, conversationID, conversationType, config);
    }
    deleteAllMessage(conversationID, conversationType, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.deleteAllMessage(conversationID, conversationType, config);
    }
    queryHistoryMessage(conversationID, conversationType, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryHistoryMessage(conversationID, conversationType, config);
    }
    downloadMediaFile(message, fileType, progress) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.downloadMediaFile(message, fileType, progress);
    }
    insertMessageToLocalDB(message, conversationID, conversationType, senderUserID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.insertMessageToLocalDB(message, conversationID, conversationType, senderUserID);
    }
    updateMessageLocalExtendedData(localExtendedData, message) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateMessageLocalExtendedData(localExtendedData, message);
    }
    revokeMessage(message, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.revokeMessage(message, config);
    }
    // MARK: - Message receipt
    sendConversationMessageReceiptRead(conversationID, conversationType) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.sendConversationMessageReceiptRead(conversationID, conversationType);
    }
    sendMessageReceiptsRead(messageList, conversationID, conversationType) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.sendMessageReceiptsRead(messageList, conversationID, conversationType);
    }
    queryMessageReceiptsInfo(messageList, conversationID, conversationType) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryMessageReceiptsInfo(messageList, conversationID, conversationType);
    }
    queryGroupMessageReceiptReadMemberList(message, groupID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupMessageReceiptMemberList(message, groupID, config, true);
    }
    queryGroupMessageReceiptUnreadMemberList(message, groupID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupMessageReceiptMemberList(message, groupID, config, false);
    }
    // MARK: - Message reaction
    addMessageReaction(reactionType, message) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.addMessageReaction(reactionType, message);
    }
    deleteMessageReaction(reactionType, message) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.deleteMessageReaction(reactionType, message);
    }
    queryMessageReactionUserList(message, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryMessageReactionUserList(message, config);
    }
    // MARK: - Room
    createRoom(roomInfo, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.createRoom(roomInfo, config);
    }
    enterRoom(roomInfo, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.enterRoom(roomInfo, config);
    }
    joinRoom(roomID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.joinRoom(roomID);
    }
    leaveRoom(roomID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.leaveRoom(roomID);
    }
    queryRoomMemberList(roomID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryRoomMemberList(roomID, config);
    }
    queryRoomMembers(userIDs, roomID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryRoomMembers(userIDs, roomID);
    }
    queryRoomOnlineMemberCount(roomID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryRoomOnlineMemberCount(roomID);
    }
    queryRoomAllAttributes(roomID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryRoomAllAttributes(roomID);
    }
    setRoomAttributes(roomAttributes, roomID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.setRoomAttributes(roomAttributes, roomID, config);
    }
    deleteRoomAttributes(keys, roomID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.deleteRoomAttributes(keys, roomID, config);
    }
    beginRoomAttributesBatchOperation(roomID, config) {
        this.engine && this.engine.beginRoomAttributesBatchOperation(roomID, config);
    }
    endRoomAttributesBatchOperation(roomID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.endRoomAttributesBatchOperation(roomID);
    }
    setRoomMembersAttributes(attributes, userIDs, roomID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.setRoomMembersAttributes(attributes, userIDs, roomID, config);
    }
    queryRoomMembersAttributes(userIDs, roomID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryRoomMembersAttributes(userIDs, roomID);
    }
    queryRoomMemberAttributesList(roomID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryRoomMemberAttributesList(roomID, config);
    }
    // MARK: - Group
    createGroup(groupInfo, userIDs, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.createGroup(groupInfo, userIDs, config);
    }
    joinGroup(groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.joinGroup(groupID);
    }
    leaveGroup(groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.leaveGroup(groupID);
    }
    dismissGroup(groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.dismissGroup(groupID);
    }
    queryGroupList() {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupList();
    }
    updateGroupName(groupName, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateGroupName(groupName, groupID);
    }
    updateGroupNotice(groupNotice, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateGroupNotice(groupNotice, groupID);
    }
    updateGroupAvatarUrl(groupAvatarUrl, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.updateGroupAvatarUrl(groupAvatarUrl, groupID);
    }
    queryGroupInfo(groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupInfo(groupID);
    }
    setGroupAttributes(groupAttributes, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.setGroupAttributes(groupAttributes, groupID);
    }
    deleteGroupAttributes(keys, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.deleteGroupAttributes(keys, groupID);
    }
    queryGroupAttributes(keys, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupAttributes(keys, groupID);
    }
    queryGroupAllAttributes(groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupAllAttributes(groupID);
    }
    setGroupMemberNickname(nickname, forUserID, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.setGroupMemberNickname(nickname, forUserID, groupID);
    }
    setGroupMemberRole(role, forUserID, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.setGroupMemberRole(role, forUserID, groupID);
    }
    transferGroupOwner(toUserID, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.transferGroupOwner(toUserID, groupID);
    }
    queryGroupMemberInfo(userID, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupMemberInfo(userID, groupID);
    }
    inviteUsersIntoGroup(userIDs, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.inviteUsersIntoGroup(userIDs, groupID);
    }
    kickGroupMembers(userIDs, groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.kickGroupMembers(userIDs, groupID);
    }
    queryGroupMemberList(groupID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupMemberList(groupID, config);
    }
    queryGroupMemberCount(groupID) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryGroupMemberCount(groupID);
    }
    // MARK: - Call
    callInvite(invitees, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.callInvite(invitees, config);
    }
    callCancel(invitees, callID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.callCancel(invitees, callID, config);
    }
    callAccept(callID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.callAccept(callID, config);
    }
    callReject(callID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.callReject(callID, config);
    }
    callQuit(callID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.callQuit(callID, config);
    }
    callEnd(callID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.callEnd(callID, config);
    }
    callingInvite(invitees, callID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.callingInvite(invitees, callID, config);
    }
    queryCallInvitationList(config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.queryCallInvitationList(config);
    }
    // MARK: - DB Search
    searchLocalConversations(config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.searchConversations(config);
    }
    searchGlobalLocalMessages(config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.searchGlobalMessages(config);
    }
    searchLocalMessages(conversationID, conversationType, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.searchMessages(conversationID, conversationType, config);
    }
    searchLocalGroups(config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.searchGroups(config);
    }
    searchLocalGroupMembers(groupID, config) {
        if (!this.engine)
            return Promise.reject(NotInitError);
        return this.engine.searchGroupMembers(groupID, config);
    }
}
ZIM._instatance = null;
