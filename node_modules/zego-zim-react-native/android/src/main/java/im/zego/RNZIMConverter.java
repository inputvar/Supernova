package im.zego;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import im.zego.zim.entity.ZIMAudioMessage;
import im.zego.zim.entity.ZIMBarrageMessage;
import im.zego.zim.entity.ZIMCallUserInfo;
import im.zego.zim.entity.ZIMCommandMessage;
import im.zego.zim.entity.ZIMConversation;
import im.zego.zim.entity.ZIMConversationChangeInfo;
import im.zego.zim.entity.ZIMCustomMessage;
import im.zego.zim.entity.ZIMErrorUserInfo;
import im.zego.zim.entity.ZIMFileMessage;
import im.zego.zim.entity.ZIMGroup;
import im.zego.zim.entity.ZIMGroupFullInfo;
import im.zego.zim.entity.ZIMGroupMemberInfo;
import im.zego.zim.entity.ZIMGroupOperatedInfo;
import im.zego.zim.entity.ZIMImageMessage;
import im.zego.zim.entity.ZIMMediaMessage;
import im.zego.zim.entity.ZIMMessage;
import im.zego.zim.entity.ZIMMessageReaction;
import im.zego.zim.entity.ZIMMessageReactionUserInfo;
import im.zego.zim.entity.ZIMMessageReceiptInfo;
import im.zego.zim.entity.ZIMMessageSentStatusChangeInfo;
import im.zego.zim.entity.ZIMPushConfig;
import im.zego.zim.entity.ZIMRevokeMessage;
import im.zego.zim.entity.ZIMRoomFullInfo;
import im.zego.zim.entity.ZIMRoomMemberAttributesInfo;
import im.zego.zim.entity.ZIMRoomMemberAttributesOperatedInfo;
import im.zego.zim.entity.ZIMRoomMemberAttributesUpdateInfo;
import im.zego.zim.entity.ZIMRoomMemberInfo;
import im.zego.zim.entity.ZIMRoomOperatedInfo;
import im.zego.zim.entity.ZIMTextMessage;
import im.zego.zim.entity.ZIMUserFullInfo;
import im.zego.zim.entity.ZIMUserInfo;
import im.zego.zim.entity.ZIMVideoMessage;
import im.zego.zim.enums.ZIMConversationNotificationStatus;
import im.zego.zim.enums.ZIMConversationType;
import im.zego.zim.enums.ZIMMessageDirection;
import im.zego.zim.enums.ZIMMessageReceiptStatus;
import im.zego.zim.enums.ZIMMessageRevokeStatus;
import im.zego.zim.enums.ZIMMessageSentStatus;
import im.zego.zim.enums.ZIMMessageType;
import im.zego.zim.enums.ZIMRevokeType;
import java.lang.Integer;
import java.lang.System;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;

public class RNZIMConverter {

    public static ZIMPushConfig convertZIMPushConfig(ReadableMap config) {
        if (config.hasKey("pushConfig")) {
            ReadableMap pushMap = config.getMap("pushConfig");
            ZIMPushConfig pushConfig = new ZIMPushConfig();
            pushConfig.title = pushMap.hasKey("title") ? pushMap.getString("title") : "";
            pushConfig.content = pushMap.hasKey("content") ? pushMap.getString("content") : "";
            pushConfig.payload = pushMap.hasKey("payload") ? pushMap.getString("payload") : "";
            pushConfig.resourcesID = pushMap.hasKey("resourcesID") ? pushMap.getString("resourcesID") : "";

            return pushConfig;
        }
        return null;
    }

    public static ReadableArray convertUserInfoListFromJavaToJs(ArrayList<ZIMUserInfo> infos) {
        if (infos == null) {
            return null;
        }

        WritableArray memberArray = Arguments.createArray();
        for (ZIMUserInfo userInfo : infos) {
            WritableMap userMap = Arguments.createMap();
            userMap.putString("userID", userInfo.userID);
            userMap.putString("userName", userInfo.userName);
            memberArray.pushMap(userMap);
        }

        return memberArray;
    }

    public static ReadableMap convertUserFullInfoFromJavaToJs(ZIMUserFullInfo userInfo) {
        if (userInfo == null) {
            return null;
        }

        WritableMap userMap = Arguments.createMap();
        WritableMap userBaseInfoMap = Arguments.createMap();
        userBaseInfoMap.putString("userID", userInfo.baseInfo.userID);
        userBaseInfoMap.putString("userName", userInfo.baseInfo.userName);

        userMap.putMap("baseInfo", userBaseInfoMap);
        userMap.putString("userAvatarUrl", userInfo.userAvatarUrl);
        userMap.putString("extendedData", userInfo.extendedData);

        return userMap;
    }

    public static ReadableArray convertErrorUserInfoListFromJavaToJs(ArrayList<ZIMErrorUserInfo> infos) {
        if (infos == null) {
            return null;
        }

        WritableArray errorUserArray = Arguments.createArray();
        for (ZIMErrorUserInfo user : infos) {
            WritableMap errorUserMap = Arguments.createMap();
            errorUserMap.putString("userID", user.userID);
            errorUserMap.putInt("reason", user.reason);
            errorUserArray.pushMap(errorUserMap);
        }

        return errorUserArray;
    }

    public static ReadableMap convertRoomMemberInfoFromJavaToJs(ZIMRoomMemberInfo userInfo) {
        if (userInfo == null) {
            return null;
        }

        WritableMap userMap = Arguments.createMap();
        userMap.putString("userID", userInfo.userID);
        userMap.putString("userName", userInfo.userName);

        return userMap;
    }

    public static ReadableMap convertConversationFromJavaToJs(ZIMConversation conversation) {
        if (conversation == null) {
            return null;
        }

        WritableMap convMap = Arguments.createMap();
        convMap.putString("conversationID", conversation.conversationID);
        convMap.putString("conversationName", conversation.conversationName);
        convMap.putString("conversationAvatarUrl", conversation.conversationAvatarUrl);
        convMap.putInt("type", conversation.type.value());
        convMap.putInt("unreadMessageCount", conversation.unreadMessageCount);
        convMap.putDouble("orderKey", conversation.orderKey);
        convMap.putInt("notificationStatus", conversation.notificationStatus.value());
        convMap.putBoolean("isPinned", conversation.isPinned);
        if (conversation.lastMessage != null) {
            convMap.putMap("lastMessage", convertMessageFromJavaToJs(conversation.lastMessage));
        } else {
            convMap.putNull("lastMessage");
        }

        return convMap;
    }

    public static ZIMConversation convertConversationFromJsToJava(ReadableMap map) {
        if (map == null) {
            return null;
        }

        ZIMConversation conversation = new ZIMConversation();
        conversation.conversationID = map.hasKey("conversationID") ? map.getString("conversationID") : "";
        conversation.conversationName = map.hasKey("conversationName") ? map.getString("conversationName") : "";
        conversation.conversationAvatarUrl =
            map.hasKey("conversationAvatarUrl") ? map.getString("conversationAvatarUrl") : "";
        conversation.unreadMessageCount = map.hasKey("unreadMessageCount") ? map.getInt("unreadMessageCount") : 0;
        long orderKey = map.hasKey("orderKey") ? Double.valueOf(map.getDouble("orderKey")).longValue() : 0;
        conversation.orderKey = orderKey;
        conversation.type = ZIMConversationType.getZIMConversationType(map.getInt("type"));
        conversation.notificationStatus =
            ZIMConversationNotificationStatus.getZIMConversationNotificationStatus(map.getInt("notificationStatus"));
        conversation.isPinned = map.hasKey("isPinned") ? map.getBoolean("isPinned") : false;
        conversation.lastMessage = null;

        return conversation;
    }

    public static ReadableArray convertMessageReceiptInfoListFromJavaToJs(ArrayList<ZIMMessageReceiptInfo> infos) {
        if (infos == null) {
            return null;
        }

        WritableArray infosArray = Arguments.createArray();
        for (ZIMMessageReceiptInfo info : infos) {
            WritableMap map = Arguments.createMap();
            map.putString("conversationID", info.conversationID);
            map.putInt("conversationType", info.conversationType.value());
            map.putString("messageID", String.valueOf(info.messageID));
            map.putInt("status", info.status.value());
            map.putInt("readMemberCount", info.readMemberCount);
            map.putInt("unreadMemberCount", info.unreadMemberCount);

            infosArray.pushMap(map);
        }

        return infosArray;
    }

    public static ReadableMap convertMessageReactionFromJavaToJs(ZIMMessageReaction info) {
        if (info == null) {
            return null;
        }

        WritableMap map = Arguments.createMap();
        map.putString("conversationID", info.conversationID);
        map.putInt("conversationType", info.conversationType.value());
        map.putString("messageID", String.valueOf(info.messageID));
        map.putString("reactionType", info.reactionType);
        map.putInt("totalCount", info.totalCount);
        map.putBoolean("isSelfIncluded", info.isSelfIncluded);

        WritableArray userArray = Arguments.createArray();
        for (ZIMMessageReactionUserInfo user : info.userList) {
            WritableMap userMap = Arguments.createMap();
            userMap.putString("userID", user.userID);
            userArray.pushMap(userMap);
        }
        map.putArray("userList", userArray);

        return map;
    }

    public static ReadableMap convertMessageSentStatusChangeInfoFromJavaToJs(ZIMMessageSentStatusChangeInfo info) {
        if (info == null) {
            return null;
        }

        WritableMap map = Arguments.createMap();
        map.putString("reason", info.reason);
        map.putInt("status", info.status.value());
        map.putMap("message", convertMessageFromJavaToJs(info.message));

        return map;
    }

    // Used for incoming base message
    public static ZIMMessage convertMessageFromJsToJava(ReadableMap messageMap) {
        if (messageMap == null) {
            return null;
        }

        ZIMMessage message = null;
        ZIMMessageType type = ZIMMessageType.getZIMMessageType(messageMap.getInt("type"));
        switch (type) {
            case TEXT:
                String textContent = messageMap.hasKey("message") ? messageMap.getString("message") : "";
                message = new ZIMTextMessage(textContent);
                break;
            case COMMAND:
                String byteContent = messageMap.hasKey("message") ? messageMap.getString("message") : "";
                String[] split = byteContent.split(",");
                int size = split.length;
                byte[] bytes = new byte[size];
                for (int i = 0; i < size; i++) {
                    int b = Integer.parseInt(split[i]);
                    bytes[i] = (byte) (b < 128 ? b : b - 256);
                }

                message = new ZIMCommandMessage(bytes);
                break;
            case BARRAGE:
                String barrageContent = messageMap.hasKey("message") ? messageMap.getString("message") : "";
                message = new ZIMBarrageMessage(barrageContent);
                break;
            case REVOKE:
                message = new ZIMRevokeMessage();
                try {
                    Field revokeTypeField = ZIMRevokeMessage.class.getDeclaredField("revokeType");
                    revokeTypeField.setAccessible(true);
                    int revokeType = messageMap.hasKey("revokeType") ? messageMap.getInt("revokeType") : -1;
                    revokeTypeField.set(message, ZIMRevokeType.getZIMRevokeType(revokeType));
                    revokeTypeField.setAccessible(false);

                    Field originalMessageTypeField = ZIMRevokeMessage.class.getDeclaredField("originalMessageType");
                    originalMessageTypeField.setAccessible(true);
                    int originalMessageType = messageMap.hasKey("originalMessageType")
                        ? messageMap.getInt("originalMessageType")
                        : 0;
                    originalMessageTypeField.set(message, ZIMMessageType.getZIMMessageType(originalMessageType));
                    originalMessageTypeField.setAccessible(false);

                    Field revokeStatusField = ZIMRevokeMessage.class.getDeclaredField("revokeStatus");
                    revokeStatusField.setAccessible(true);
                    int revokeStatus = messageMap.hasKey("revokeStatus") ? messageMap.getInt("revokeStatus") : -1;
                    revokeStatusField.set(message, ZIMMessageRevokeStatus.getZIMMessageRevokeStatus(revokeStatus));
                    revokeStatusField.setAccessible(false);

                    Field revokeTimestampField = ZIMRevokeMessage.class.getDeclaredField("revokeTimestamp");
                    revokeTimestampField.setAccessible(true);
                    long revokeTimestamp = messageMap.hasKey("revokeTimestamp")
                        ? Double.valueOf(messageMap.getDouble("revokeTimestamp")).longValue()
                        : 0;
                    revokeTimestampField.set(message, revokeTimestamp);
                    revokeTimestampField.setAccessible(false);

                    Field operatedUserIDField = ZIMRevokeMessage.class.getDeclaredField("operatedUserID");
                    operatedUserIDField.setAccessible(true);
                    String operatedUserID = messageMap.hasKey("operatedUserID")
                        ? messageMap.getString("operatedUserID")
                        : "";
                    operatedUserIDField.set(message, operatedUserID);
                    operatedUserIDField.setAccessible(false);

                    Field revokeExtendedDataField = ZIMRevokeMessage.class.getDeclaredField("revokeExtendedData");
                    revokeExtendedDataField.setAccessible(true);
                    String revokeExtendedData = messageMap.hasKey("revokeExtendedData")
                        ? messageMap.getString("revokeExtendedData")
                        : "";
                    revokeExtendedDataField.set(message, revokeExtendedData);
                    revokeExtendedDataField.setAccessible(false);

                    Field originalTextMessageContentField =
                        ZIMRevokeMessage.class.getDeclaredField("originalTextMessageContent");
                    originalTextMessageContentField.setAccessible(true);
                    String originalTextMessageContent = messageMap.hasKey("originalTextMessageContent")
                        ? messageMap.getString("originalTextMessageContent")
                        : "";
                    originalTextMessageContentField.set(message, originalTextMessageContent);
                    originalTextMessageContentField.setAccessible(false);
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                break;
            case CUSTOM:
                String customContent = messageMap.hasKey("message") ? messageMap.getString("message") : "";
                int subType = messageMap.hasKey("subType") ? messageMap.getInt("subType") : 0;
                message = new ZIMCustomMessage(customContent, subType);
                ((ZIMCustomMessage) message).searchedContent =
                    messageMap.hasKey("searchedContent") ? messageMap.getString("searchedContent") : "";
                break;
            case IMAGE:
                String imageFileLocalPath = messageMap.hasKey("fileLocalPath")
                    ? messageMap.getString("fileLocalPath")
                    : "";
                message = new ZIMImageMessage(imageFileLocalPath);
                if (messageMap.hasKey("thumbnailDownloadUrl")) {
                    ((ZIMImageMessage) message).setThumbnailDownloadUrl(messageMap.getString("thumbnailDownloadUrl"));
                }

                if (messageMap.hasKey("largeImageDownloadUrl")) {
                    ((ZIMImageMessage) message).setLargeImageDownloadUrl(messageMap.getString("largeImageDownloadUrl"));
                }

                try {
                    if (messageMap.hasKey("thumbnailLocalPath")) {
                        Field thumbnailLocalPathField = ZIMImageMessage.class.getDeclaredField("thumbnailLocalPath");
                        thumbnailLocalPathField.setAccessible(true);
                        thumbnailLocalPathField.set(message, messageMap.getString("thumbnailLocalPath"));
                        thumbnailLocalPathField.setAccessible(false);
                    }

                    if (messageMap.hasKey("largeImageLocalPath")) {
                        Field largeImageLocalPathField = ZIMImageMessage.class.getDeclaredField("largeImageLocalPath");
                        largeImageLocalPathField.setAccessible(true);
                        largeImageLocalPathField.set(message, messageMap.getString("largeImageLocalPath"));
                        largeImageLocalPathField.setAccessible(false);
                    }

                    if (messageMap.hasKey("originalImageWidth")) {
                        Field originalImageWidthField = ZIMImageMessage.class.getDeclaredField("originalImageWidth");
                        originalImageWidthField.setAccessible(true);
                        originalImageWidthField.set(message, messageMap.getInt("originalImageWidth"));
                        originalImageWidthField.setAccessible(false);
                    }

                    if (messageMap.hasKey("originalImageHeight")) {
                        Field originalImageHeightField = ZIMImageMessage.class.getDeclaredField("originalImageHeight");
                        originalImageHeightField.setAccessible(true);
                        originalImageHeightField.set(message, messageMap.getInt("originalImageHeight"));
                        originalImageHeightField.setAccessible(false);
                    }

                    if (messageMap.hasKey("thumbnailWidth")) {
                        Field thumbnailWidthField = ZIMImageMessage.class.getDeclaredField("thumbnailWidth");
                        thumbnailWidthField.setAccessible(true);
                        thumbnailWidthField.set(message, messageMap.getInt("thumbnailWidth"));
                        thumbnailWidthField.setAccessible(false);
                    }

                    if (messageMap.hasKey("thumbnailHeight")) {
                        Field thumbnailHeightField = ZIMImageMessage.class.getDeclaredField("thumbnailHeight");
                        thumbnailHeightField.setAccessible(true);
                        thumbnailHeightField.set(message, messageMap.getInt("thumbnailHeight"));
                        thumbnailHeightField.setAccessible(false);
                    }

                    if (messageMap.hasKey("largeImageWidth")) {
                        Field largeImageWidthField = ZIMImageMessage.class.getDeclaredField("largeImageWidth");
                        largeImageWidthField.setAccessible(true);
                        largeImageWidthField.set(message, messageMap.getInt("largeImageWidth"));
                        largeImageWidthField.setAccessible(false);
                    }

                    if (messageMap.hasKey("largeImageHeight")) {
                        Field largeImageHeightField = ZIMImageMessage.class.getDeclaredField("largeImageHeight");
                        largeImageHeightField.setAccessible(true);
                        largeImageHeightField.set(message, messageMap.getInt("largeImageHeight"));
                        largeImageHeightField.setAccessible(false);
                    }
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                break;
            case FILE:
                String fileLocalPath = messageMap.hasKey("fileLocalPath") ? messageMap.getString("fileLocalPath") : "";
                message = new ZIMFileMessage(fileLocalPath);
                break;
            case VIDEO:
                String videoFileLocalPath = messageMap.hasKey("fileLocalPath")
                    ? messageMap.getString("fileLocalPath")
                    : "";
                long videoDuration = messageMap.hasKey("videoDuration")
                    ? Double.valueOf(messageMap.getDouble("videoDuration")).longValue()
                    : 0;
                message = new ZIMVideoMessage(videoFileLocalPath, videoDuration);
                try {
                    if (messageMap.hasKey("videoFirstFrameDownloadUrl")) {
                        ((ZIMVideoMessage) message).setVideoFirstFrameDownloadUrl(
                                messageMap.getString("videoFirstFrameDownloadUrl")
                            );
                    }

                    if (messageMap.hasKey("videoFirstFrameLocalPath")) {
                        Field videoFirstFrameLocalPathField =
                            ZIMVideoMessage.class.getDeclaredField("videoFirstFrameLocalPath");
                        videoFirstFrameLocalPathField.setAccessible(true);
                        videoFirstFrameLocalPathField.set(message, messageMap.getString("videoFirstFrameLocalPath"));
                        videoFirstFrameLocalPathField.setAccessible(false);
                    }

                    if (messageMap.hasKey("videoFirstFrameWidth")) {
                        Field videoFirstFrameWidthField =
                            ZIMVideoMessage.class.getDeclaredField("videoFirstFrameWidth");
                        videoFirstFrameWidthField.setAccessible(true);
                        videoFirstFrameWidthField.set(message, messageMap.getInt("videoFirstFrameWidth"));
                        videoFirstFrameWidthField.setAccessible(false);
                    }

                    if (messageMap.hasKey("videoFirstFrameHeight")) {
                        Field videoFirstFrameHeightField =
                            ZIMVideoMessage.class.getDeclaredField("videoFirstFrameHeight");
                        videoFirstFrameHeightField.setAccessible(true);
                        videoFirstFrameHeightField.set(message, messageMap.getInt("videoFirstFrameHeight"));
                        videoFirstFrameHeightField.setAccessible(false);
                    }
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                break;
            case AUDIO:
                String audioFileLocalPath = messageMap.hasKey("fileLocalPath")
                    ? messageMap.getString("fileLocalPath")
                    : "";
                long audioDuration = messageMap.hasKey("audioDuration")
                    ? Double.valueOf(messageMap.getDouble("audioDuration")).longValue()
                    : 0;
                message = new ZIMAudioMessage(audioFileLocalPath, audioDuration);
                break;
            case UNKNOWN:
            default:
                message = new ZIMMessage(ZIMMessageType.UNKNOWN);
                break;
        }
        try {
            // public field

            message.extendedData = messageMap.hasKey("extendedData") ? messageMap.getString("extendedData") : "";
            message.localExtendedData =
                messageMap.hasKey("localExtendedData") ? messageMap.getString("localExtendedData") : "";

            // private field

            Field msgTypeField = ZIMMessage.class.getDeclaredField("type");
            msgTypeField.setAccessible(true);
            msgTypeField.set(message, ZIMMessageType.getZIMMessageType(messageMap.getInt("type")));
            msgTypeField.setAccessible(false);

            Field messageIDField = ZIMMessage.class.getDeclaredField("messageID");
            messageIDField.setAccessible(true);
            long messageID = messageMap.hasKey("messageID")
                ? Long.valueOf(messageMap.getString("messageID")).longValue()
                : 0;
            messageIDField.set(message, messageID);
            messageIDField.setAccessible(false);

            Field conversationIDField = ZIMMessage.class.getDeclaredField("conversationID");
            conversationIDField.setAccessible(true);
            String conversationID = messageMap.hasKey("conversationID") ? messageMap.getString("conversationID") : "";
            conversationIDField.set(message, conversationID);
            conversationIDField.setAccessible(false);

            Field conversationSeqField = ZIMMessage.class.getDeclaredField("conversationSeq");
            conversationSeqField.setAccessible(true);
            long conversationSeq = messageMap.hasKey("conversationSeq")
                ? Double.valueOf(messageMap.getDouble("conversationSeq")).longValue()
                : 0;
            conversationSeqField.set(message, conversationSeq);
            conversationSeqField.setAccessible(false);

            Field senderUserIDField = ZIMMessage.class.getDeclaredField("senderUserID");
            senderUserIDField.setAccessible(true);
            String senderUserID = messageMap.hasKey("senderUserID") ? messageMap.getString("senderUserID") : "";
            senderUserIDField.set(message, senderUserID);
            senderUserIDField.setAccessible(false);

            Field timestampField = ZIMMessage.class.getDeclaredField("timestamp");
            timestampField.setAccessible(true);
            long timestamp = messageMap.hasKey("timestamp")
                ? Double.valueOf(messageMap.getDouble("timestamp")).longValue()
                : 0;
            timestampField.set(message, timestamp);
            timestampField.setAccessible(false);

            Field localMessageIDField = ZIMMessage.class.getDeclaredField("localMessageID");
            localMessageIDField.setAccessible(true);
            long localMessageID = messageMap.hasKey("localMessageID")
                ? Long.valueOf(messageMap.getString("localMessageID")).longValue()
                : 0;
            localMessageIDField.set(message, localMessageID);
            localMessageIDField.setAccessible(false);

            Field conversationTypeField = ZIMMessage.class.getDeclaredField("conversationType");
            conversationTypeField.setAccessible(true);
            int conversationType = messageMap.hasKey("conversationType") ? messageMap.getInt("conversationType") : -1;
            conversationTypeField.set(message, ZIMConversationType.getZIMConversationType(conversationType));
            conversationTypeField.setAccessible(false);

            Field directionField = ZIMMessage.class.getDeclaredField("direction");
            directionField.setAccessible(true);
            int direction = messageMap.hasKey("direction") ? messageMap.getInt("direction") : -1;
            directionField.set(message, ZIMMessageDirection.getZIMMessageDirection(direction));
            directionField.setAccessible(false);

            Field sentStatusField = ZIMMessage.class.getDeclaredField("sentStatus");
            sentStatusField.setAccessible(true);
            int sentStatus = messageMap.hasKey("sentStatus") ? messageMap.getInt("sentStatus") : -1;
            sentStatusField.set(message, ZIMMessageSentStatus.getZIMMessageSentStatus(sentStatus));
            sentStatusField.setAccessible(false);

            Field orderKeyField = ZIMMessage.class.getDeclaredField("orderKey");
            orderKeyField.setAccessible(true);
            long orderKey = messageMap.hasKey("orderKey")
                ? Double.valueOf(messageMap.getDouble("orderKey")).longValue()
                : 0;
            orderKeyField.set(message, orderKey);
            orderKeyField.setAccessible(false);

            Field isUserInsertedField = ZIMMessage.class.getDeclaredField("isUserInserted");
            isUserInsertedField.setAccessible(true);
            boolean isUserInserted = messageMap.hasKey("isUserInserted")
                ? messageMap.getBoolean("isUserInserted")
                : false;
            isUserInsertedField.set(message, isUserInserted);
            isUserInsertedField.setAccessible(false);

            Field receiptStatusField = ZIMMessage.class.getDeclaredField("receiptStatus");
            receiptStatusField.setAccessible(true);
            int receiptStatus = messageMap.hasKey("receiptStatus") ? messageMap.getInt("receiptStatus") : 0;
            receiptStatusField.set(message, ZIMMessageReceiptStatus.getZIMMessageReceiptStatus(receiptStatus));
            receiptStatusField.setAccessible(false);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        if (message instanceof ZIMMediaMessage) {
            if (messageMap.hasKey("fileDownloadUrl")) {
                ((ZIMMediaMessage) message).setFileDownloadUrl(messageMap.getString("fileDownloadUrl"));
            }
            try {
                if (messageMap.hasKey("fileUID")) {
                    Field fileUIDField = ZIMMediaMessage.class.getDeclaredField("fileUID");
                    fileUIDField.setAccessible(true);
                    fileUIDField.set(message, messageMap.getString("fileUID"));
                    fileUIDField.setAccessible(false);
                }

                if (messageMap.hasKey("fileName")) {
                    Field fileNameField = ZIMMediaMessage.class.getDeclaredField("fileName");
                    fileNameField.setAccessible(true);
                    fileNameField.set(message, messageMap.getString("fileName"));
                    fileNameField.setAccessible(false);
                }

                if (messageMap.hasKey("fileSize")) {
                    Field fileSizeField = ZIMMediaMessage.class.getDeclaredField("fileSize");
                    fileSizeField.setAccessible(true);
                    fileSizeField.set(message, Double.valueOf(messageMap.getDouble("fileSize")).longValue());
                    fileSizeField.setAccessible(false);
                }
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }

        return message;
    }

    // Used for queried messages
    public static ZIMMessage convertMessageFromJsToJava(HashMap<String, Object> messageMap) {
        if (messageMap == null) {
            return null;
        }

        ZIMMessage message = null;
        ZIMMessageType type = ZIMMessageType.getZIMMessageType(
            Double.valueOf((double) messageMap.get("type")).intValue()
        );
        switch (type) {
            case TEXT:
                message = new ZIMTextMessage((String) messageMap.get("message"));
                break;
            case COMMAND:
                String[] split = ((String) messageMap.get("message")).split(",");
                int size = split.length;
                byte[] bytes = new byte[size];
                for (int i = 0; i < size; i++) {
                    int b = Integer.parseInt(split[i]);
                    bytes[i] = (byte) (b < 128 ? b : b - 256);
                }

                message = new ZIMCommandMessage(bytes);
                break;
            case BARRAGE:
                message = new ZIMBarrageMessage((String) messageMap.get("message"));
                break;
            case REVOKE:
                message = new ZIMRevokeMessage();
                try {
                    Field revokeTypeField = ZIMRevokeMessage.class.getDeclaredField("revokeType");
                    revokeTypeField.setAccessible(true);
                    int revokeType = messageMap.containsKey("revokeType")
                        ? Double.valueOf((double) messageMap.get("revokeType")).intValue()
                        : -1;
                    revokeTypeField.set(message, ZIMRevokeType.getZIMRevokeType(revokeType));
                    revokeTypeField.setAccessible(false);

                    Field originalMessageTypeField = ZIMRevokeMessage.class.getDeclaredField("originalMessageType");
                    originalMessageTypeField.setAccessible(true);
                    int originalMessageType = messageMap.containsKey("originalMessageType")
                        ? Double.valueOf((double) messageMap.get("originalMessageType")).intValue()
                        : 0;
                    originalMessageTypeField.set(message, ZIMMessageType.getZIMMessageType(originalMessageType));
                    originalMessageTypeField.setAccessible(false);

                    Field revokeStatusField = ZIMRevokeMessage.class.getDeclaredField("revokeStatus");
                    revokeStatusField.setAccessible(true);
                    int revokeStatus = messageMap.containsKey("revokeStatus")
                        ? Double.valueOf((double) messageMap.get("revokeStatus")).intValue()
                        : -1;
                    revokeStatusField.set(message, ZIMMessageRevokeStatus.getZIMMessageRevokeStatus(revokeStatus));
                    revokeStatusField.setAccessible(false);

                    Field revokeTimestampField = ZIMRevokeMessage.class.getDeclaredField("revokeTimestamp");
                    revokeTimestampField.setAccessible(true);
                    long revokeTimestamp = messageMap.containsKey("revokeTimestamp")
                        ? Double.valueOf((double) messageMap.get("revokeTimestamp")).longValue()
                        : 0;
                    revokeTimestampField.set(message, revokeTimestamp);
                    revokeTimestampField.setAccessible(false);

                    Field operatedUserIDField = ZIMRevokeMessage.class.getDeclaredField("operatedUserID");
                    operatedUserIDField.setAccessible(true);
                    String operatedUserID = messageMap.containsKey("operatedUserID")
                        ? (String) messageMap.get("operatedUserID")
                        : "";
                    operatedUserIDField.set(message, operatedUserID);
                    operatedUserIDField.setAccessible(false);

                    Field revokeExtendedDataField = ZIMRevokeMessage.class.getDeclaredField("revokeExtendedData");
                    revokeExtendedDataField.setAccessible(true);
                    String revokeExtendedData = messageMap.containsKey("revokeExtendedData")
                        ? (String) messageMap.get("revokeExtendedData")
                        : "";
                    revokeExtendedDataField.set(message, revokeExtendedData);
                    revokeExtendedDataField.setAccessible(false);

                    Field originalTextMessageContentField =
                        ZIMRevokeMessage.class.getDeclaredField("originalTextMessageContent");
                    originalTextMessageContentField.setAccessible(true);
                    String originalTextMessageContent = messageMap.containsKey("originalTextMessageContent")
                        ? (String) messageMap.get("originalTextMessageContent")
                        : "";
                    originalTextMessageContentField.set(message, originalTextMessageContent);
                    originalTextMessageContentField.setAccessible(false);
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                break;
            case CUSTOM:
                int subType = messageMap.containsKey("subType")
                    ? Double.valueOf((double) messageMap.get("subType")).intValue()
                    : 0;
                message = new ZIMCustomMessage((String) messageMap.get("message"), subType);
                if (messageMap.containsKey("searchedContent")) {
                    ((ZIMCustomMessage) message).searchedContent = (String) messageMap.get("searchedContent");
                }
                break;
            case IMAGE:
                message = new ZIMImageMessage((String) messageMap.get("fileLocalPath"));
                if (messageMap.containsKey("thumbnailDownloadUrl")) {
                    ((ZIMImageMessage) message).setThumbnailDownloadUrl(
                            (String) messageMap.get("thumbnailDownloadUrl")
                        );
                }

                if (messageMap.containsKey("largeImageDownloadUrl")) {
                    ((ZIMImageMessage) message).setLargeImageDownloadUrl(
                            (String) messageMap.get("largeImageDownloadUrl")
                        );
                }

                try {
                    if (messageMap.containsKey("thumbnailLocalPath")) {
                        Field thumbnailLocalPathField = ZIMImageMessage.class.getDeclaredField("thumbnailLocalPath");
                        thumbnailLocalPathField.setAccessible(true);
                        thumbnailLocalPathField.set(message, (String) messageMap.get("thumbnailLocalPath"));
                        thumbnailLocalPathField.setAccessible(false);
                    }

                    if (messageMap.containsKey("largeImageLocalPath")) {
                        Field largeImageLocalPathField = ZIMImageMessage.class.getDeclaredField("largeImageLocalPath");
                        largeImageLocalPathField.setAccessible(true);
                        largeImageLocalPathField.set(message, (String) messageMap.get("largeImageLocalPath"));
                        largeImageLocalPathField.setAccessible(false);
                    }

                    if (messageMap.containsKey("originalImageWidth")) {
                        Field originalImageWidthField = ZIMImageMessage.class.getDeclaredField("originalImageWidth");
                        originalImageWidthField.setAccessible(true);
                        originalImageWidthField.set(
                            message,
                            Double.valueOf((double) messageMap.get("originalImageWidth")).intValue()
                        );
                        originalImageWidthField.setAccessible(false);
                    }

                    if (messageMap.containsKey("originalImageHeight")) {
                        Field originalImageHeightField = ZIMImageMessage.class.getDeclaredField("originalImageHeight");
                        originalImageHeightField.setAccessible(true);
                        originalImageHeightField.set(
                            message,
                            Double.valueOf((double) messageMap.get("originalImageHeight")).intValue()
                        );
                        originalImageHeightField.setAccessible(false);
                    }

                    if (messageMap.containsKey("thumbnailWidth")) {
                        Field thumbnailWidthField = ZIMImageMessage.class.getDeclaredField("thumbnailWidth");
                        thumbnailWidthField.setAccessible(true);
                        thumbnailWidthField.set(
                            message,
                            Double.valueOf((double) messageMap.get("thumbnailWidth")).intValue()
                        );
                        thumbnailWidthField.setAccessible(false);
                    }

                    if (messageMap.containsKey("thumbnailHeight")) {
                        Field thumbnailHeightField = ZIMImageMessage.class.getDeclaredField("thumbnailHeight");
                        thumbnailHeightField.setAccessible(true);
                        thumbnailHeightField.set(
                            message,
                            Double.valueOf((double) messageMap.get("thumbnailHeight")).intValue()
                        );
                        thumbnailHeightField.setAccessible(false);
                    }

                    if (messageMap.containsKey("largeImageWidth")) {
                        Field largeImageWidthField = ZIMImageMessage.class.getDeclaredField("largeImageWidth");
                        largeImageWidthField.setAccessible(true);
                        largeImageWidthField.set(
                            message,
                            Double.valueOf((double) messageMap.get("largeImageWidth")).intValue()
                        );
                        largeImageWidthField.setAccessible(false);
                    }

                    if (messageMap.containsKey("largeImageHeight")) {
                        Field largeImageHeightField = ZIMImageMessage.class.getDeclaredField("largeImageHeight");
                        largeImageHeightField.setAccessible(true);
                        largeImageHeightField.set(
                            message,
                            Double.valueOf((double) messageMap.get("largeImageHeight")).intValue()
                        );
                        largeImageHeightField.setAccessible(false);
                    }
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                break;
            case FILE:
                message = new ZIMFileMessage((String) messageMap.get("fileLocalPath"));
                break;
            case VIDEO:
                message =
                    new ZIMVideoMessage(
                        (String) messageMap.get("fileLocalPath"),
                        Double.valueOf((double) messageMap.get("videoDuration")).longValue()
                    );
                try {
                    if (messageMap.containsKey("videoFirstFrameDownloadUrl")) {
                        ((ZIMVideoMessage) message).setVideoFirstFrameDownloadUrl(
                                (String) messageMap.get("videoFirstFrameDownloadUrl")
                            );
                    }

                    if (messageMap.containsKey("videoFirstFrameLocalPath")) {
                        Field videoFirstFrameLocalPathField =
                            ZIMVideoMessage.class.getDeclaredField("videoFirstFrameLocalPath");
                        videoFirstFrameLocalPathField.setAccessible(true);
                        videoFirstFrameLocalPathField.set(message, (String) messageMap.get("videoFirstFrameLocalPath"));
                        videoFirstFrameLocalPathField.setAccessible(false);
                    }

                    if (messageMap.containsKey("videoFirstFrameWidth")) {
                        Field videoFirstFrameWidthField =
                            ZIMVideoMessage.class.getDeclaredField("videoFirstFrameWidth");
                        videoFirstFrameWidthField.setAccessible(true);
                        videoFirstFrameWidthField.set(
                            message,
                            Double.valueOf((double) messageMap.get("videoFirstFrameWidth")).intValue()
                        );
                        videoFirstFrameWidthField.setAccessible(false);
                    }

                    if (messageMap.containsKey("videoFirstFrameHeight")) {
                        Field videoFirstFrameHeightField =
                            ZIMVideoMessage.class.getDeclaredField("videoFirstFrameHeight");
                        videoFirstFrameHeightField.setAccessible(true);
                        videoFirstFrameHeightField.set(
                            message,
                            Double.valueOf((double) messageMap.get("videoFirstFrameHeight")).intValue()
                        );
                        videoFirstFrameHeightField.setAccessible(false);
                    }
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
                break;
            case AUDIO:
                message =
                    new ZIMAudioMessage(
                        (String) messageMap.get("fileLocalPath"),
                        Double.valueOf((double) messageMap.get("audioDuration")).longValue()
                    );
                break;
            case UNKNOWN:
            default:
                message = new ZIMMessage(ZIMMessageType.UNKNOWN);
                break;
        }
        try {
            // public field

            message.extendedData =
                messageMap.containsKey("extendedData") ? (String) messageMap.get("extendedData") : "";
            message.localExtendedData =
                messageMap.containsKey("localExtendedData") ? (String) messageMap.get("localExtendedData") : "";

            // private field

            Field msgTypeField = ZIMMessage.class.getDeclaredField("type");
            msgTypeField.setAccessible(true);
            msgTypeField.set(message, type);
            msgTypeField.setAccessible(false);

            Field messageIDField = ZIMMessage.class.getDeclaredField("messageID");
            messageIDField.setAccessible(true);
            long messageID = messageMap.containsKey("messageID")
                ? Long.valueOf((String) messageMap.get("messageID")).longValue()
                : 0;
            messageIDField.set(message, messageID);
            messageIDField.setAccessible(false);

            Field conversationIDField = ZIMMessage.class.getDeclaredField("conversationID");
            conversationIDField.setAccessible(true);
            String conversationID = messageMap.containsKey("conversationID")
                ? (String) messageMap.get("conversationID")
                : "";
            conversationIDField.set(message, conversationID);
            conversationIDField.setAccessible(false);

            Field conversationSeqField = ZIMMessage.class.getDeclaredField("conversationSeq");
            conversationSeqField.setAccessible(true);
            long conversationSeq = messageMap.containsKey("conversationSeq")
                ? Double.valueOf((double) messageMap.get("conversationSeq")).longValue()
                : 0;
            conversationSeqField.set(message, conversationSeq);
            conversationSeqField.setAccessible(false);

            Field senderUserIDField = ZIMMessage.class.getDeclaredField("senderUserID");
            senderUserIDField.setAccessible(true);
            String senderUserID = messageMap.containsKey("senderUserID") ? (String) messageMap.get("senderUserID") : "";
            senderUserIDField.set(message, senderUserID);
            senderUserIDField.setAccessible(false);

            Field timestampField = ZIMMessage.class.getDeclaredField("timestamp");
            timestampField.setAccessible(true);
            long timestamp = messageMap.containsKey("timestamp")
                ? Double.valueOf((double) messageMap.get("timestamp")).longValue()
                : 0;
            timestampField.set(message, timestamp);
            timestampField.setAccessible(false);

            Field localMessageIDField = ZIMMessage.class.getDeclaredField("localMessageID");
            localMessageIDField.setAccessible(true);
            long localMessageID = messageMap.containsKey("localMessageID")
                ? Long.valueOf((String) messageMap.get("localMessageID")).longValue()
                : 0;
            localMessageIDField.set(message, localMessageID);
            localMessageIDField.setAccessible(false);

            Field conversationTypeField = ZIMMessage.class.getDeclaredField("conversationType");
            conversationTypeField.setAccessible(true);
            int conversationType = messageMap.containsKey("conversationType")
                ? Double.valueOf((double) messageMap.get("conversationType")).intValue()
                : -1;
            conversationTypeField.set(message, ZIMConversationType.getZIMConversationType(conversationType));
            conversationTypeField.setAccessible(false);

            Field directionField = ZIMMessage.class.getDeclaredField("direction");
            directionField.setAccessible(true);
            int direction = messageMap.containsKey("direction")
                ? Double.valueOf((double) messageMap.get("direction")).intValue()
                : -1;
            directionField.set(message, ZIMMessageDirection.getZIMMessageDirection(direction));
            directionField.setAccessible(false);

            Field sentStatusField = ZIMMessage.class.getDeclaredField("sentStatus");
            sentStatusField.setAccessible(true);
            int sentStatus = messageMap.containsKey("sentStatus")
                ? Double.valueOf((double) messageMap.get("sentStatus")).intValue()
                : -1;
            sentStatusField.set(message, ZIMMessageSentStatus.getZIMMessageSentStatus(sentStatus));
            sentStatusField.setAccessible(false);

            Field orderKeyField = ZIMMessage.class.getDeclaredField("orderKey");
            orderKeyField.setAccessible(true);
            long orderKey = messageMap.containsKey("orderKey")
                ? Double.valueOf((double) messageMap.get("orderKey")).longValue()
                : 0;
            orderKeyField.set(message, orderKey);
            orderKeyField.setAccessible(false);

            Field isUserInsertedField = ZIMMessage.class.getDeclaredField("isUserInserted");
            isUserInsertedField.setAccessible(true);
            boolean isUserInserted = messageMap.containsKey("isUserInserted")
                ? ((Boolean) messageMap.get("isUserInserted")).booleanValue()
                : false;
            isUserInsertedField.set(message, isUserInserted);
            isUserInsertedField.setAccessible(false);

            Field receiptStatusField = ZIMMessage.class.getDeclaredField("receiptStatus");
            receiptStatusField.setAccessible(true);
            int receiptStatus = messageMap.containsKey("receiptStatus")
                ? Double.valueOf((double) messageMap.get("receiptStatus")).intValue()
                : 0;
            receiptStatusField.set(message, ZIMMessageReceiptStatus.getZIMMessageReceiptStatus(receiptStatus));
            receiptStatusField.setAccessible(false);
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        if (message instanceof ZIMMediaMessage) {
            if (messageMap.containsKey("fileDownloadUrl")) {
                ((ZIMMediaMessage) message).setFileDownloadUrl((String) messageMap.get("fileDownloadUrl"));
            }
            try {
                if (messageMap.containsKey("fileUID")) {
                    Field fileUIDField = ZIMMediaMessage.class.getDeclaredField("fileUID");
                    fileUIDField.setAccessible(true);
                    fileUIDField.set(message, (String) messageMap.get("fileUID"));
                    fileUIDField.setAccessible(false);
                }

                if (messageMap.containsKey("fileName")) {
                    Field fileNameField = ZIMMediaMessage.class.getDeclaredField("fileName");
                    fileNameField.setAccessible(true);
                    fileNameField.set(message, (String) messageMap.get("fileName"));
                    fileNameField.setAccessible(false);
                }

                if (messageMap.containsKey("fileSize")) {
                    Field fileSizeField = ZIMMediaMessage.class.getDeclaredField("fileSize");
                    fileSizeField.setAccessible(true);
                    fileSizeField.set(message, Double.valueOf((double) messageMap.get("fileSize")).longValue());
                    fileSizeField.setAccessible(false);
                }
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }

        return message;
    }

    public static WritableMap convertMessageFromJavaToJs(ZIMMessage message) {
        WritableMap messageMap = Arguments.createMap();
        messageMap.putInt("type", message.getType().value());
        messageMap.putString("messageID", String.valueOf(message.getMessageID()));
        messageMap.putString("conversationID", message.getConversationID());
        messageMap.putDouble("conversationSeq", message.getConversationSeq());
        messageMap.putString("senderUserID", message.getSenderUserID());
        messageMap.putDouble("timestamp", message.getTimestamp());
        messageMap.putString("localMessageID", String.valueOf(message.getLocalMessageID()));
        messageMap.putInt("conversationType", message.getConversationType().value());
        messageMap.putInt("direction", message.getDirection().value());
        messageMap.putInt("sentStatus", message.getSentStatus().value());
        messageMap.putDouble("orderKey", message.getOrderKey());
        messageMap.putBoolean("isUserInserted", message.isUserInserted());
        messageMap.putInt("receiptStatus", message.getReceiptStatus().value());
        messageMap.putString("extendedData", message.extendedData);
        messageMap.putString("localExtendedData", message.localExtendedData);
        messageMap.putBoolean("isBroadcastMessage", message.isBroadcastMessage());

        ArrayList<ZIMMessageReaction> reactions = message.getReactions();
        WritableArray reactionArray = Arguments.createArray();
        for (ZIMMessageReaction info : reactions) {
            reactionArray.pushMap(convertMessageReactionFromJavaToJs(info));
        }
        messageMap.putArray("reactions", reactionArray);

        switch (message.getType()) {
            case TEXT:
                assert message instanceof ZIMTextMessage;
                messageMap.putString("message", ((ZIMTextMessage) message).message);
                break;
            case COMMAND:
                assert message instanceof ZIMCommandMessage;
                byte[] data = ((ZIMCommandMessage) message).message;
                WritableMap dataMap = Arguments.createMap();
                for (int i = 0; i < data.length; i++) {
                    int b = data[i];
                    dataMap.putInt(String.valueOf(i), b < 0 ? 256 + b : b);
                }
                messageMap.putMap("message", dataMap);
                break;
            case BARRAGE:
                assert message instanceof ZIMBarrageMessage;
                messageMap.putString("message", ((ZIMBarrageMessage) message).message);
                break;
            case REVOKE:
                assert message instanceof ZIMRevokeMessage;
                break;
            case CUSTOM:
                assert message instanceof ZIMCustomMessage;
                messageMap.putString("message", ((ZIMCustomMessage) message).message);
                messageMap.putInt("subType", ((ZIMCustomMessage) message).subType);
                messageMap.putString("searchedContent", ((ZIMCustomMessage) message).searchedContent);
                break;
            case IMAGE:
                assert message instanceof ZIMImageMessage;

                messageMap.putString(
                    "thumbnailDownloadUrl",
                    ((ZIMImageMessage) message).getThumbnailDownloadUrl() != null
                        ? ((ZIMImageMessage) message).getThumbnailDownloadUrl()
                        : ""
                );
                messageMap.putString(
                    "thumbnailLocalPath",
                    ((ZIMImageMessage) message).getThumbnailLocalPath() != null
                        ? ((ZIMImageMessage) message).getThumbnailLocalPath()
                        : ""
                );
                messageMap.putString(
                    "largeImageDownloadUrl",
                    ((ZIMImageMessage) message).getLargeImageDownloadUrl() != null
                        ? ((ZIMImageMessage) message).getLargeImageDownloadUrl()
                        : ""
                );
                messageMap.putString(
                    "largeImageLocalPath",
                    ((ZIMImageMessage) message).getLargeImageLocalPath() != null
                        ? ((ZIMImageMessage) message).getLargeImageLocalPath()
                        : ""
                );
                messageMap.putInt("originalImageWidth", ((ZIMImageMessage) message).getOriginalImageWidth());
                messageMap.putInt("originalImageHeight", ((ZIMImageMessage) message).getOriginalImageHeight());
                messageMap.putInt("thumbnailWidth", ((ZIMImageMessage) message).getThumbnailWidth());
                messageMap.putInt("thumbnailHeight", ((ZIMImageMessage) message).getThumbnailHeight());
                messageMap.putInt("largeImageWidth", ((ZIMImageMessage) message).getLargeImageWidth());
                messageMap.putInt("largeImageHeight", ((ZIMImageMessage) message).getLargeImageHeight());
                break;
            case VIDEO:
                assert message instanceof ZIMVideoMessage;

                messageMap.putDouble("videoDuration", ((ZIMVideoMessage) message).getVideoDuration());
                messageMap.putString(
                    "videoFirstFrameDownloadUrl",
                    ((ZIMVideoMessage) message).getVideoFirstFrameDownloadUrl()
                );
                messageMap.putString(
                    "videoFirstFrameLocalPath",
                    ((ZIMVideoMessage) message).getVideoFirstFrameLocalPath()
                );
                messageMap.putInt("videoFirstFrameWidth", ((ZIMVideoMessage) message).getVideoFirstFrameWidth());
                messageMap.putInt("videoFirstFrameHeight", ((ZIMVideoMessage) message).getVideoFirstFrameHeight());
                break;
            case AUDIO:
                assert message instanceof ZIMAudioMessage;
                messageMap.putDouble("audioDuration", ((ZIMAudioMessage) message).getAudioDuration());
                break;
            case FILE:
                assert message instanceof ZIMFileMessage;
                break;
            case UNKNOWN:
            default:
                break;
        }

        if (message instanceof ZIMMediaMessage) {
            messageMap.putString("fileLocalPath", ((ZIMMediaMessage) message).getFileLocalPath());
            messageMap.putString("fileDownloadUrl", ((ZIMMediaMessage) message).getFileDownloadUrl());
            messageMap.putString("fileUID", ((ZIMMediaMessage) message).getFileUID());
            messageMap.putString("fileName", ((ZIMMediaMessage) message).getFileName());
            messageMap.putDouble("fileSize", ((ZIMMediaMessage) message).getFileSize());
        } else if (message instanceof ZIMRevokeMessage) {
            messageMap.putInt("revokeType", ((ZIMRevokeMessage) message).getRevokeType().value());
            messageMap.putInt("revokeStatus", ((ZIMRevokeMessage) message).getRevokeStatus().value());
            messageMap.putDouble("revokeTimestamp", ((ZIMRevokeMessage) message).getRevokeTimestamp());
            messageMap.putString("operatedUserID", ((ZIMRevokeMessage) message).getOperatedUserID());
            messageMap.putString("revokeExtendedData", ((ZIMRevokeMessage) message).getRevokeExtendedData());
            messageMap.putInt("originalMessageType", ((ZIMRevokeMessage) message).getOriginalMessageType().value());
            messageMap.putString(
                "originalTextMessageContent",
                ((ZIMRevokeMessage) message).getOriginalTextMessageContent()
            );
        }
        return messageMap;
    }

    public static ReadableArray convertMessageListFromJavaToJs(ArrayList<ZIMMessage> infos) {
        if (infos == null) {
            return null;
        }

        WritableArray infosArray = Arguments.createArray();
        for (ZIMMessage info : infos) {
            infosArray.pushMap(convertMessageFromJavaToJs(info));
        }

        return infosArray;
    }

    public static ReadableMap convertFullRoomInfoFromJavaToJs(ZIMRoomFullInfo roomFullInfo) {
        if (roomFullInfo == null) {
            return null;
        }

        WritableMap roomInfoMap = Arguments.createMap();
        WritableMap baseInfoMap = Arguments.createMap();
        baseInfoMap.putString("roomID", roomFullInfo.baseInfo.roomID);
        baseInfoMap.putString("roomName", roomFullInfo.baseInfo.roomName);
        roomInfoMap.putMap("baseInfo", baseInfoMap);

        return roomInfoMap;
    }

    public static ReadableMap convertFullGroupInfoFromJavaToJs(ZIMGroupFullInfo groupFullInfo) {
        if (groupFullInfo == null) {
            return null;
        }

        WritableMap groupFullInfoMap = Arguments.createMap();
        WritableMap baseInfoMap = Arguments.createMap();
        baseInfoMap.putString("groupID", groupFullInfo.baseInfo.groupID);
        baseInfoMap.putString("groupName", groupFullInfo.baseInfo.groupName);
        baseInfoMap.putString("groupAvatarUrl", groupFullInfo.baseInfo.groupAvatarUrl);
        groupFullInfoMap.putMap("baseInfo", baseInfoMap);
        groupFullInfoMap.putString("groupNotice", groupFullInfo.groupNotice);
        WritableMap groupAttrMap = Arguments.createMap();
        for (String key : groupFullInfo.groupAttributes.keySet()) {
            groupAttrMap.putString(key, groupFullInfo.groupAttributes.get(key));
        }
        groupFullInfoMap.putMap("groupAttributes", groupAttrMap);
        groupFullInfoMap.putInt("notificationStatus", groupFullInfo.notificationStatus.value());

        return groupFullInfoMap;
    }

    public static ReadableMap convertGroupMemberInfoFromJavaToJs(ZIMGroupMemberInfo info) {
        if (info == null) {
            return null;
        }

        WritableMap infoMap = Arguments.createMap();
        infoMap.putString("memberNickname", info.memberNickname);
        infoMap.putInt("memberRole", info.memberRole);
        infoMap.putString("memberAvatarUrl", info.memberAvatarUrl);
        infoMap.putString("userID", info.userID);
        infoMap.putString("userName", info.userName);

        return infoMap;
    }

    public static ReadableArray convertGroupMemberInfoListFromJavaToJs(ArrayList<ZIMGroupMemberInfo> infos) {
        if (infos == null) {
            return null;
        }

        WritableArray userArray = Arguments.createArray();
        for (ZIMGroupMemberInfo memberInfo : infos) {
            userArray.pushMap(convertGroupMemberInfoFromJavaToJs(memberInfo));
        }

        return userArray;
    }

    public static ReadableArray convertGroupListFromJavaToJs(ArrayList<ZIMGroup> groupList) {
        if (groupList == null) {
            return null;
        }

        WritableArray groupArray = Arguments.createArray();
        for (ZIMGroup group : groupList) {
            WritableMap groupMap = Arguments.createMap();
            WritableMap baseInfoMap = Arguments.createMap();
            baseInfoMap.putString("groupID", group.baseInfo.groupID);
            baseInfoMap.putString("groupName", group.baseInfo.groupName);
            baseInfoMap.putString("groupAvatarUrl", group.baseInfo.groupAvatarUrl);
            groupMap.putMap("baseInfo", baseInfoMap);
            groupMap.putInt("notificationStatus", group.notificationStatus.value());

            groupArray.pushMap(groupMap);
        }

        return groupArray;
    }

    public static ReadableArray convertCallUserListFromJavaToJs(ArrayList<ZIMCallUserInfo> callUserInfos) {
        if (callUserInfos == null) {
            return null;
        }

        WritableArray callUserArray = Arguments.createArray();
        for (ZIMCallUserInfo userInfo : callUserInfos) {
            WritableMap callUserMap = Arguments.createMap();
            callUserMap.putString("userID", userInfo.userID);
            callUserMap.putInt("state", userInfo.state.value());
            callUserMap.putString("extendedData", userInfo.extendedData);

            callUserArray.pushMap(callUserMap);
        }

        return callUserArray;
    }

    public static ReadableArray convertConversationChangeInfoFromJavaToJs(
        ArrayList<ZIMConversationChangeInfo> infoList
    ) {
        if (infoList == null) {
            return null;
        }

        WritableArray convInfoArray = Arguments.createArray();
        for (ZIMConversationChangeInfo info : infoList) {
            WritableMap convInfoMap = Arguments.createMap();
            convInfoMap.putInt("event", info.event.value());
            convInfoMap.putMap("conversation", convertConversationFromJavaToJs(info.conversation));

            convInfoArray.pushMap(convInfoMap);
        }

        return convInfoArray;
    }

    public static ReadableMap convertGroupOperatedInfoFromJavaToJs(ZIMGroupOperatedInfo info) {
        if (info == null) {
            return null;
        }

        WritableMap infoMap = Arguments.createMap();
        infoMap.putString("userID", info.userID);
        infoMap.putString("userName", info.userName);
        infoMap.putString("memberNickname", info.memberNickname);
        infoMap.putInt("memberRole", info.memberRole);
        infoMap.putMap("operatedUserInfo", convertGroupMemberInfoFromJavaToJs(info.operatedUserInfo));

        return infoMap;
    }

    public static ReadableMap convertRoomMemberAttributesInfoFromJavaToJs(ZIMRoomMemberAttributesInfo info) {
        if (info == null) {
            return null;
        }

        WritableMap infoMap = Arguments.createMap();
        infoMap.putString("userID", info.userID);
        WritableMap attrMap = Arguments.createMap();
        for (String key : info.attributes.keySet()) {
            attrMap.putString(key, info.attributes.get(key));
        }
        infoMap.putMap("attributes", attrMap);

        return infoMap;
    }

    public static ReadableArray convertRoomMemberAttributesInfoListFromJavaToJs(
        ArrayList<ZIMRoomMemberAttributesInfo> infoList
    ) {
        if (infoList == null) {
            return null;
        }

        WritableArray infoArray = Arguments.createArray();
        for (ZIMRoomMemberAttributesInfo info : infoList) {
            infoArray.pushMap(convertRoomMemberAttributesInfoFromJavaToJs(info));
        }

        return infoArray;
    }

    public static ReadableMap convertRoomMemberAttributesOperatedInfoFromJavaToJs(
        ZIMRoomMemberAttributesOperatedInfo info
    ) {
        if (info == null) {
            return null;
        }

        WritableMap infoMap = Arguments.createMap();
        infoMap.putMap("attributesInfo", convertRoomMemberAttributesInfoFromJavaToJs(info.attributesInfo));
        WritableArray errorKeyArray = Arguments.createArray();
        for (String errorKey : info.errorKeys) {
            errorKeyArray.pushString(errorKey);
        }
        infoMap.putArray("errorKeys", errorKeyArray);

        return infoMap;
    }

    public static ReadableArray convertRoomMemberAttributesOperatedInfoListFromJavaToJs(
        ArrayList<ZIMRoomMemberAttributesOperatedInfo> infoList
    ) {
        if (infoList == null) {
            return null;
        }

        WritableArray infoArray = Arguments.createArray();
        for (ZIMRoomMemberAttributesOperatedInfo info : infoList) {
            infoArray.pushMap(convertRoomMemberAttributesOperatedInfoFromJavaToJs(info));
        }

        return infoArray;
    }

    public static ReadableMap convertRoomMemberAttributesUpdateInfoFromJavaToJs(
        ZIMRoomMemberAttributesUpdateInfo info
    ) {
        if (info == null) {
            return null;
        }

        WritableMap infoMap = Arguments.createMap();
        infoMap.putMap("attributesInfo", convertRoomMemberAttributesInfoFromJavaToJs(info.attributesInfo));

        return infoMap;
    }

    public static ReadableArray convertRoomMemberAttributesUpdateInfoListFromJavaToJs(
        ArrayList<ZIMRoomMemberAttributesUpdateInfo> infoList
    ) {
        if (infoList == null) {
            return null;
        }

        WritableArray infoArray = Arguments.createArray();
        for (ZIMRoomMemberAttributesUpdateInfo info : infoList) {
            infoArray.pushMap(convertRoomMemberAttributesUpdateInfoFromJavaToJs(info));
        }

        return infoArray;
    }

    public static ReadableMap convertRoomOperatedInfoFromJavaToJs(ZIMRoomOperatedInfo info) {
        if (info == null) {
            return null;
        }

        WritableMap infoMap = Arguments.createMap();
        infoMap.putString("userID", info.userID);

        return infoMap;
    }
}
