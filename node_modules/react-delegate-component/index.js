"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var bool = _propTypes2.default.bool,
    func = _propTypes2.default.func,
    object = _propTypes2.default.object;


function generateDefaultComponent(PassedDefault, props) {
  var Default = function Default() {
    var delegateProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return _react2.default.createElement(PassedDefault, _extends({}, props, delegateProps));
  };
  Default.displayName = "Default";

  return Default;
}

var Delegate = function (_React$Component) {
  _inherits(Delegate, _React$Component);

  function Delegate(props) {
    _classCallCheck(this, Delegate);

    // Memoize the renderDefault prop, so that we don't make new functions if the
    // default stays the same. This allows children to take advantage of PureComponent skips
    // if the prop doesn't change.
    var _this = _possibleConstructorReturn(this, (Delegate.__proto__ || Object.getPrototypeOf(Delegate)).call(this, props));

    if (props.default && props.passDefault) {
      _this.Default = generateDefaultComponent(props.default, props.props);
    }
    return _this;
  }

  _createClass(Delegate, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      // Recompute renderDefault function if necessary
      if (nextProps.passDefault && nextProps.default && this.props.default !== nextProps.default) {
        this.Default = generateDefaultComponent(nextProps.default, nextProps.props);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          to = _props.to,
          render = _props.render,
          children = _props.children,
          Default = _props.default,
          passDefault = _props.passDefault;

      var Render = to || render || children;

      if (!Render && !Default) {
        return null;
      }

      if (!Render) {
        return _react2.default.createElement(Default, this.props.props);
      }

      if (!Default || !passDefault) {
        return _react2.default.createElement(Render, this.props.props);
      }

      return _react2.default.createElement(Render, _extends({ Default: this.Default }, this.props.props));
    }
  }]);

  return Delegate;
}(_react2.default.Component);

Delegate.displayName = "Delegate";
Delegate.propTypes = {
  to: func,
  render: func,
  default: func,
  props: object,
  passDefault: bool
};
Delegate.defaultProps = {
  props: {},
  passDefault: true
};
exports.default = Delegate;
