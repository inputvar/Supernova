#import "ZPNsUtils.h"
#import "internal/ZPNsAppEnvironmentUtil.h"

#if TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_WATCH
static NSString *const kEntitlementsAPSEnvironmentKey = @"Entitlements.aps-environment";
#else
static NSString *const kEntitlementsAPSEnvironmentKey =
    @"Entitlements.com.apple.developer.aps-environment";
#endif
static NSString *const kAPSEnvironmentDevelopmentValue = @"development";

static ZPNsUtils *_utils = nil;

@interface ZPNsUtils ()

@property NSMutableDictionary<NSString *, NSUUID *> *seqMap;

@end

@implementation ZPNsUtils

+ (instancetype)getInstance {
  if (!_utils) {
    @synchronized(self) {
      if (!_utils) {
        _utils = [[ZPNsUtils alloc] init];
        _utils.seqMap = [[NSMutableDictionary alloc] init];
      }
    }
  }
  return _utils;
}

- (void)generateUUID:(NSString *)seq {
  [_seqMap setObject:[NSUUID UUID] forKey:seq];
}

- (NSUUID *)getUUID:(NSString *)seq {
  return [_seqMap objectForKey:seq];
}

+ (BOOL)isSandboxApp {
  static BOOL isSandboxApp = YES;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    isSandboxApp = ![ZPNsUtils isProductionApp];
  });
  [[ZPNsUtils getInstance]
      writeCustomLog:[NSString stringWithFormat:@"Auto analyze isSandboxApp: %d", isSandboxApp]
          moduleName:@""];
  return isSandboxApp;
}

+ (BOOL)isProductionApp {
  const BOOL defaultAppTypeProd = YES;

  NSError *error = nil;
  if ([ZPNsAppEnvironmentUtil isSimulator]) {
    [[ZPNsUtils getInstance]
        writeCustomLog:
            @"Running InstanceID on a simulator doesn't have APNS.Use prod profile by default."
            moduleName:@""];
    return defaultAppTypeProd;
  }

  if ([ZPNsAppEnvironmentUtil isFromAppStore]) {
    // Apps distributed via AppStore or TestFlight use the Production APNS certificates.
    return defaultAppTypeProd;
  }
#if TARGET_OS_OSX || TARGET_OS_MACCATALYST
  NSString *path = [[[[NSBundle mainBundle] resourcePath] stringByDeletingLastPathComponent]
      stringByAppendingPathComponent:@"embedded.provisionprofile"];
#elif TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_WATCH
  NSString *path = [[[NSBundle mainBundle] bundlePath]
      stringByAppendingPathComponent:@"embedded.mobileprovision"];
#endif

  if ([ZPNsAppEnvironmentUtil isAppStoreReceiptSandbox] && !path.length) {
    // Distributed via TestFlight
    return defaultAppTypeProd;
  }

  NSMutableData *profileData = [NSMutableData dataWithContentsOfFile:path options:0 error:&error];
  if (!profileData.length || error) {
    [[ZPNsUtils getInstance]
        writeCustomLog:
            [NSString
                stringWithFormat:@"Error while reading embedded mobileprovision. Error: %@", error]
            moduleName:@""];
    return defaultAppTypeProd;
  }

  // The "embedded.mobileprovision" sometimes contains characters with value 0, which signals the
  // end of a c-string and halts the ASCII parser, or with value > 127, which violates strict 7-bit
  // ASCII. Replace any 0s or invalid characters in the input.
  uint8_t *profileBytes = (uint8_t *)profileData.bytes;
  for (int i = 0; i < profileData.length; i++) {
    uint8_t currentByte = profileBytes[i];
    if (!currentByte || currentByte > 127) {
      profileBytes[i] = '.';
    }
  }

  NSString *embeddedProfile = [[NSString alloc] initWithBytesNoCopy:profileBytes
                                                             length:profileData.length
                                                           encoding:NSASCIIStringEncoding
                                                       freeWhenDone:NO];
  if (error || !embeddedProfile.length) {
    [[ZPNsUtils getInstance]
        writeCustomLog:
            [NSString
                stringWithFormat:@"Error while reading embedded mobileprovision. Error: %@", error]
            moduleName:@""];
    return defaultAppTypeProd;
  }

  NSScanner *scanner = [NSScanner scannerWithString:embeddedProfile];
  NSString *plistContents;
  if ([scanner scanUpToString:@"<plist" intoString:nil]) {
    if ([scanner scanUpToString:@"</plist>" intoString:&plistContents]) {
      plistContents = [plistContents stringByAppendingString:@"</plist>"];
    }
  }

  if (!plistContents.length) {
    return defaultAppTypeProd;
  }

  NSData *data = [plistContents dataUsingEncoding:NSUTF8StringEncoding];
  if (!data.length) {
    [[ZPNsUtils getInstance]
        writeCustomLog:@"Couldn't read plist fetched from embedded mobileprovision"
            moduleName:@""];
    return defaultAppTypeProd;
  }

  NSError *plistMapError;
  id plistData = [NSPropertyListSerialization propertyListWithData:data
                                                           options:NSPropertyListImmutable
                                                            format:nil
                                                             error:&plistMapError];
  if (plistMapError || ![plistData isKindOfClass:[NSDictionary class]]) {
    [[ZPNsUtils getInstance]
        writeCustomLog:[NSString stringWithFormat:@"plistMapError or plist data is not kind of "
                                                  @"class NSDictionary. Error: %@",
                                                  error]
            moduleName:@""];
    return defaultAppTypeProd;
  }

  NSDictionary *plistMap = (NSDictionary *)plistData;
  if ([plistMap valueForKeyPath:@"ProvisionedDevices"]) {
    [[ZPNsUtils getInstance]
        writeCustomLog:
            @"Provisioning profile has specifically provisioned devices.most likely a Dev profile."
            moduleName:@""];
  }

  NSString *apsEnvironment = [plistMap valueForKeyPath:kEntitlementsAPSEnvironmentKey];
  [[ZPNsUtils getInstance]
      writeCustomLog:[NSString stringWithFormat:@"APNS Environment in profile: %@", apsEnvironment]
          moduleName:@""];

  // No aps-environment in the profile.
  if (!apsEnvironment.length) {
    [[ZPNsUtils getInstance]
        writeCustomLog:[NSString stringWithFormat:
                                     @"No aps-environment set. If testing on a device APNS is not "
                                     @"correctly configured. Please recheck your provisioning "
                                     @"profiles. If testing on a simulator this is fine since APNS "
                                     @"doesn't work on the simulator."]
            moduleName:@""];
    return defaultAppTypeProd;
  }

  if ([apsEnvironment isEqualToString:kAPSEnvironmentDevelopmentValue]) {
    [[ZPNsUtils getInstance] writeCustomLog:@"Detecting APS development value" moduleName:@""];
    return NO;
  }

  return defaultAppTypeProd;
}

- (void)writeCustomLog:(NSString *)customLog moduleName:(NSString *)moduleName {
  if (!moduleName || [moduleName length] == 0) {
    NSLog(@"ZPNs RN: %@", customLog);
    moduleName = @"RN";
  }

  Class ZIM = NSClassFromString(@"ZPNs");
  if ([[NSClassFromString(@"ZPNs") alloc] init] != nil) {
    SEL selector = NSSelectorFromString(@"writeCustomLog:moduleName:");
    IMP imp = [ZIM methodForSelector:selector];
    void (*func)(id, SEL, NSString *, NSString *) = (void (*)(id, SEL, NSString *, NSString *))imp;
    func(ZIM, selector, customLog, moduleName);
  }
}

+ (BOOL)isNotNull:(NSObject *)object {
  if (object == nil || object == NULL || [object isEqual:[NSNull null]]) {
    return false;
  } else {
    return true;
  }
}

@end
