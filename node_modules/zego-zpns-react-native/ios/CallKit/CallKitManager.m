#import "CallKitManager.h"
#import <ZPNs/ZPNs.h>
#import "../RCTZegoZPNs.h"
#import "../ZPNsUtils.h"
#import "../internal/NSDictionary+safeInvoke.h"
#import "../internal/NSMutableDictionary+safeInvoke.h"

static NSString *PREFIX = @"im.zego.zpns.reactnative.";
#define RN_EVENT(oc_method_name) [NSString stringWithFormat:@"%@%@", PREFIX, oc_method_name]

static CallKitManager *_callKitManager = nil;

static CXProviderConfiguration *_cxProviderConfiguration = nil;

static bool _isProduct = false;

static NSMutableArray<NSArray *> *_holdNomalResultArr = nil;

@interface CallKitManager ()

@property(nonatomic, assign) BOOL isEnableVoIP;

@property(nonatomic, strong) NSData *voIPToken;

@property(nonatomic, assign) BOOL hasListeners;

@property CXProvider *cxProvider;

@property CXCallController *cxCallController;

@property NSString *callID;

@property unsigned int seq;

@property NSMutableDictionary<NSString *, CXAction *> *actionMap;

@property RCTZPNsNativeModule *rctCtx;

@end

@implementation CallKitManager

- (BOOL)isContainInitConfig {
  if (_cxProviderConfiguration == nil || _cxProviderConfiguration == NULL ||
      [_cxProviderConfiguration isEqual:[NSNull null]]) {
    return false;
  } else {
    return true;
  }
}

- (void)setInitConfig:(NSDictionary *)configMap ctx:(RCTZPNsNativeModule *)ctx {
  self.rctCtx = ctx;

  NSString *localizedName = [configMap safeObjectForKey:@"localizedName"];
  NSNumber *supportsVideo = [configMap safeObjectForKey:@"supportsVideo"];
  NSNumber *maximumCallsPerCallGroup = [configMap safeObjectForKey:@"maximumCallsPerCallGroup"];
  NSNumber *maximumCallGroups = [configMap safeObjectForKey:@"maximumCallGroups"];
  NSArray<NSNumber *> *supportedHandleTypes = [configMap safeObjectForKey:@"supportedHandleTypes"];
  NSString *iconTemplateImageName = [configMap safeObjectForKey:@"iconTemplateImageName"];

  _cxProviderConfiguration = [[CXProviderConfiguration alloc] initWithLocalizedName:localizedName];
  if (supportsVideo != nil) _cxProviderConfiguration.supportsVideo = [supportsVideo boolValue];
  if (maximumCallsPerCallGroup != nil)
    _cxProviderConfiguration.maximumCallsPerCallGroup =
        [maximumCallsPerCallGroup unsignedIntegerValue];
  if (maximumCallGroups != nil)
    _cxProviderConfiguration.maximumCallGroups = [maximumCallGroups unsignedIntegerValue];
  if (supportedHandleTypes != nil)
    _cxProviderConfiguration.supportedHandleTypes =
        [[NSSet alloc] initWithArray:supportedHandleTypes];
  if (iconTemplateImageName != nil)
    _cxProviderConfiguration.iconTemplateImageData =
        UIImagePNGRepresentation([UIImage imageNamed:iconTemplateImageName]);
}

+ (CallKitManager *)getInstance {
  if (!_callKitManager) {
    @synchronized(self) {
      if (!_callKitManager) {
        _callKitManager = [[CallKitManager alloc] init];
        _callKitManager.actionMap = [[NSMutableDictionary alloc] init];
        _callKitManager.seq = 0;
      }
    }
  }
  return _callKitManager;
}

+ (void)isProduct:(bool)isProduct {
  _isProduct = isProduct;
}

- (void)reportIncomingCallWithTitle:(NSDictionary *)updateMap
                               UUID:(NSString *)uuidString
                           resolver:(RCTPromiseResolveBlock)resolve
                           rejecter:(RCTPromiseRejectBlock)reject {
  CXCallUpdate *update = [self oCXCallUpdate:updateMap];
  NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:uuidString];

  if (!_callKitManager.cxProvider) {
    _callKitManager.cxProvider =
        [[CXProvider alloc] initWithConfiguration:_cxProviderConfiguration];
    [_callKitManager.cxProvider setDelegate:_callKitManager queue:dispatch_get_main_queue()];
  }

  if (!_callKitManager.cxCallController) {
    _callKitManager.cxCallController =
        [[CXCallController alloc] initWithQueue:dispatch_get_main_queue()];
  }

  [self.cxProvider reportNewIncomingCallWithUUID:uuid
                                          update:update
                                      completion:^(NSError *_Nullable error) {
                                        if (!error) {
                                          resolve(nil);
                                        } else {
                                          reject([NSString stringWithFormat:@"%d", (int)error.code],
                                                 error.description, nil);
                                        }
                                      }];
}

- (void)reportCallEndedWithUUID:(NSString *)uuidString
                         reason:(CXCallEndedReason)endedReason
                       resolver:(RCTPromiseResolveBlock)resolve
                       rejecter:(RCTPromiseRejectBlock)reject {
  NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:uuidString];
  if (!uuid) {
    reject(@"-1", @"uuid format error", nil);
    return;
  }

  [self.cxProvider reportCallWithUUID:uuid endedAtDate:nil reason:endedReason];
  resolve(nil);
}

- (void)reportCallUpdateWithUUID:(NSDictionary *)updateMap
                            UUID:(NSString *)uuidString
                        resolver:(RCTPromiseResolveBlock)resolve
                        rejecter:(RCTPromiseRejectBlock)reject {
  CXCallUpdate *update = [self oCXCallUpdate:updateMap];
  NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:uuidString];
  if (!uuid) {
    reject(@"-1", @"uuid format error", nil);
    return;
  }

  [self.cxProvider reportCallWithUUID:uuid updated:update];
  resolve(nil);
}

- (void)reportOutgoingCallWithUUID:(NSString *)uuidString
                          resolver:(RCTPromiseResolveBlock)resolve
                          rejecter:(RCTPromiseRejectBlock)reject {
  NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:uuidString];
  if (!uuid) {
    reject(@"-1", @"uuid format error", nil);
    return;
  }

  [self.cxProvider reportOutgoingCallWithUUID:uuid connectedAtDate:nil];
  resolve(nil);
}

#pragma mark - voIP delegate

- (void)pushRegistry:(nonnull PKPushRegistry *)registry
    didUpdatePushCredentials:(nonnull PKPushCredentials *)pushCredentials
                     forType:(nonnull PKPushType)type {
  NSString *voipToken = [self getHexStringForData:[pushCredentials token]];

  [[ZPNsUtils getInstance]
      writeCustomLog:[NSString
                         stringWithFormat:@"isProduct: %d, voip token: %@", _isProduct, voipToken]
          moduleName:@""];
  self.voIPToken = [pushCredentials token];
  if (self.isEnableVoIP) {
    [[ZPNs shared] setVoipToken:[pushCredentials token] isProduct:_isProduct];
  }
}

- (void)pushRegistry:(PKPushRegistry *)registry
    didReceiveIncomingPushWithPayload:(PKPushPayload *)payload
                              forType:(PKPushType)type
                withCompletionHandler:(void (^)(void))completion {
  [[ZPNsUtils getInstance]
      writeCustomLog:[NSString stringWithFormat:@"didReceiveIncomingPushWithPayload in comming."]
          moduleName:@""];
  // NSString *seq = [self generateSeqStr];
  //[[ZPNsUtils getInstance] generateUUID:seq];
  // NSUUID *uuid = [[ZPNsUtils getInstance] getUUID:seq];
  NSUUID *uuid = [NSUUID UUID];

  NSString *title = @"";
  BOOL voIPIsVideoMode = NO;
  int voIPHandleType = 0;
  NSString *voIPSenderContactInfo = @"";

  // 取 zego 字段
  NSDictionary *zegoDic = [payload.dictionaryPayload safeObjectForKey:@"zego"];
  if (zegoDic) {
    NSNumber *voIPModeNumber = [zegoDic safeObjectForKey:@"voip_has_video"];
    if (voIPModeNumber) {
      voIPIsVideoMode = [voIPModeNumber boolValue];
    }

    NSNumber *tmpVoipHandleType = [zegoDic safeObjectForKey:@"voip_handle_type"];
    if (tmpVoipHandleType) {
      voIPHandleType = [tmpVoipHandleType intValue];
    }

    NSString *tmpVoIPSenderContactInfo = [zegoDic safeObjectForKey:@"voip_handle_value"];
    if (tmpVoIPSenderContactInfo) {
      voIPSenderContactInfo = tmpVoIPSenderContactInfo;
    }
  }

  NSObject *aps = [[payload dictionaryPayload] safeObjectForKey:@"aps"];
  // 判断 alert 为 string 还是 map, string 直接赋值给 title, map 取其中的 title
  // ,如果对应的值为空则默认为空字符串
  if (aps && [aps isKindOfClass:[NSDictionary class]]) {
    NSDictionary *apsDic = (NSDictionary *)aps;
    NSObject *alertObj = [apsDic safeObjectForKey:@"alert"];
    if (alertObj && [alertObj isKindOfClass:[NSDictionary class]]) {
      NSString *tmpTitle = [((NSDictionary *)alertObj) safeObjectForKey:@"title"];
      if (tmpTitle) {
        title = tmpTitle;
      }
    } else if (alertObj && [alertObj isKindOfClass:[NSString class]]) {
      title = (NSString *)alertObj;
    }
  }

  if (_callKitManager.cxProvider == nil) {
    _callKitManager.cxProvider =
        [[CXProvider alloc] initWithConfiguration:_cxProviderConfiguration];
    [_callKitManager.cxProvider setDelegate:_callKitManager queue:dispatch_get_main_queue()];
  }
  if (_callKitManager.cxCallController == nil) {
    _callKitManager.cxCallController =
        [[CXCallController alloc] initWithQueue:dispatch_get_main_queue()];
  }
  CXCallUpdate *update = [[CXCallUpdate alloc] init];
  update.localizedCallerName = title;
  if (voIPHandleType > 0) {
    update.remoteHandle = [[CXHandle alloc] initWithType:(CXHandleType)voIPHandleType
                                                   value:voIPSenderContactInfo];
  }
  if (voIPIsVideoMode) {
    update.hasVideo = voIPIsVideoMode;
  }
  [[ZPNsUtils getInstance]
      writeCustomLog:[NSString stringWithFormat:@"Invoke  reportNewIncomingCallWithUUID."]
          moduleName:@""];
  [self.cxProvider
      reportNewIncomingCallWithUUID:uuid
                             update:update
                         completion:^(NSError *_Nullable error) {
                           if (self.hasListeners) {
                             [self.rctCtx sendEventWithName:RN_EVENT(@"didReceiveIncomingPush")
                                                       body:@{
                                                         @"message" : payload.dictionaryPayload,
                                                         @"seq" : uuid.UUIDString
                                                       }];
                           } else {
                             [self
                                 addDicToHoldNomalEventWithName:@"didReceiveIncomingPush"
                                                           body:@{
                                                             @"message" : payload.dictionaryPayload,
                                                             @"seq" : uuid.UUIDString
                                                           }];
                             [[ZPNsUtils getInstance] writeCustomLog:@"hold didReceiveIncomingPush"
                                                          moduleName:@"[510]"];
                           }
                           completion();

                           NSMutableString *log = [NSMutableString
                               stringWithFormat:@"didReceiveIncomingPush completion. title:%@ ",
                                                title];
                           if ([payload.dictionaryPayload objectForKey:@"call_id"]) {
                             [log appendFormat:@"call id:%@ ", [payload.dictionaryPayload
                                                                   safeObjectForKey:@"call_id"]];
                           }
                           if (!(error == nil || error == NULL || [error isEqual:[NSNull null]])) {
                             [log appendFormat:@"code:%ld ", error.code];
                             if (!(error.domain == nil || error.domain == NULL ||
                                   [error.domain isEqual:[NSNull null]])) {
                               [log appendFormat:@"domain:%@ ", error.domain];
                             }
                             if (!(error.userInfo == nil || error.userInfo == NULL ||
                                   [error.userInfo isEqual:[NSNull null]])) {
                               [log appendFormat:@"userInfo:%@ ", error.userInfo];
                             }
                           }
                           [[ZPNsUtils getInstance] writeCustomLog:log moduleName:@""];
                         }];
}

// 当接收到呼叫重置时 调用的函数，这个函数必须被实现，其不需做任何逻辑，只用来重置状态
- (void)providerDidReset:(CXProvider *)provider {
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"providerDidReset") body:@{@"message" : @0}];
  } else {
    [self addDicToHoldNomalEventWithName:@"providerDidReset" body:@{@"message" : @0}];
  }
}

// 呼叫开始时回调
- (void)providerDidBegin:(CXProvider *)provider {
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"providerDidBegin") body:@{@"message" : @0}];
  } else {
    [self addDicToHoldNomalEventWithName:@"providerDidBegin" body:@{@"message" : @0}];
  }
}
// 音频会话激活状态的回调
- (void)provider:(CXProvider *)provider didActivateAudioSession:(AVAudioSession *)audioSession {
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"didActivateAudioSession") body:@{@"message" : @0}];
  } else {
    [self addDicToHoldNomalEventWithName:@"didActivateAudioSession" body:@{@"message" : @0}];
  }
}
// 音频会话停用的回调
- (void)provider:(CXProvider *)provider didDeactivateAudioSession:(AVAudioSession *)audioSession {
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"didDeactivateAudioSession") body:@{@"message" : @0}];
  } else {
    [self addDicToHoldNomalEventWithName:@"didDeactivateAudioSession" body:@{@"message" : @0}];
  }
}
// 行为超时的回调
- (void)provider:(CXProvider *)provider timedOutPerformingAction:(CXAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"timedOutPerformingAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"timedOutPerformingAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}
// 有事务被提交时调用
// 如果返回YES 则表示事务被捕获处理 后面的回调都不会调用 如果返回NO
// 则表示事务不被捕获，会回调后面的函数
- (BOOL)provider:(CXProvider *)provider executeTransaction:(CXTransaction *)transaction {
  return NO;
}
// 点击开始按钮的回调
- (void)provider:(CXProvider *)provider performStartCallAction:(CXStartCallAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"performStartCallAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"performStartCallAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}
// 点击接听按钮的回调
- (void)provider:(CXProvider *)provider performAnswerCallAction:(CXAnswerCallAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"performAnswerCallAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"performAnswerCallAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}
// 点击结束按钮的回调
- (void)provider:(CXProvider *)provider performEndCallAction:(CXEndCallAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"performEndCallAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"performEndCallAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}
// 点击保持通话按钮的回调
- (void)provider:(CXProvider *)provider performSetHeldCallAction:(CXSetHeldCallAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"performSetHeldCallAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"performSetHeldCallAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}
// 点击静音按钮的回调
- (void)provider:(CXProvider *)provider performSetMutedCallAction:(CXSetMutedCallAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"performSetMutedCallAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"performSetMutedCallAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}
// 点击组按钮的回调
- (void)provider:(CXProvider *)provider performSetGroupCallAction:(CXSetGroupCallAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"performSetGroupCallAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"performSetGroupCallAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}
// DTMF功能回调
- (void)provider:(CXProvider *)provider performPlayDTMFCallAction:(CXPlayDTMFCallAction *)action {
  NSString *seq = [self generateSeqStr];
  [self.actionMap safeSetObject:action forKey:seq];
  if (self.hasListeners) {
    [self.rctCtx sendEventWithName:RN_EVENT(@"performPlayDTMFCallAction")
                              body:@{@"message" : @0, @"seq" : seq}];
  } else {
    [self addDicToHoldNomalEventWithName:@"performPlayDTMFCallAction"
                                    body:@{@"message" : @0, @"seq" : seq}];
  }
}

- (void)ActionFail:(NSString *)seq {
  CXAction *action = [self.actionMap safeObjectForKey:seq];
  if ([ZPNsUtils isNotNull:action]) {
    [action fail];
    [self.actionMap removeObjectForKey:seq];
    [[ZPNsUtils getInstance]
        writeCustomLog:[NSString stringWithFormat:@"report [action fail] success. seq:%@", seq]
            moduleName:@""];
  } else {
    [[ZPNsUtils getInstance]
        writeCustomLog:[NSString stringWithFormat:@"report [action fail] failed. target action not "
                                                  @"at the action map. seq:%@",
                                                  seq]
            moduleName:@""];
  }
}

- (void)ActionFullFill:(NSString *)seq {
  CXAction *action = [self.actionMap safeObjectForKey:seq];
  if ([ZPNsUtils isNotNull:action]) {
    [action fulfill];
    [self.actionMap removeObjectForKey:seq];
    [[ZPNsUtils getInstance]
        writeCustomLog:[NSString stringWithFormat:@"report [action fulfill] success. seq:%@", seq]
            moduleName:@""];
  } else {
    [[ZPNsUtils getInstance]
        writeCustomLog:[NSString stringWithFormat:@"report [action fulfill] failed. target action "
                                                  @"not at the action map. seq:%@",
                                                  seq]
            moduleName:@""];
  }
}

#pragma mark - Utils
- (NSString *)getHexStringForData:(NSData *)data {
  if ([[[UIDevice currentDevice] systemVersion] floatValue] >= 13) {
    if (![data isKindOfClass:[NSData class]]) {
      return @"";
    }
    NSUInteger len = [data length];
    char *chars = (char *)[data bytes];
    NSMutableString *hexString = [[NSMutableString alloc] init];
    for (NSUInteger i = 0; i < len; i++) {
      [hexString appendString:[NSString stringWithFormat:@"%0.2hhx", chars[i]]];
    }
    return hexString;
  } else {
    NSString *myToken = [[data description]
        stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@"<>"]];
    myToken = [myToken stringByReplacingOccurrencesOfString:@" " withString:@""];
    return myToken;
  }
}

- (CXCallUpdate *)oCXCallUpdate:(NSDictionary *)updateMap {
  CXCallUpdate *update = [[CXCallUpdate alloc] init];
  if ([updateMap safeObjectForKey:@"supportsDTMF"])
    update.supportsDTMF = [[updateMap safeObjectForKey:@"supportsDTMF"] boolValue];
  if ([updateMap safeObjectForKey:@"supportsHolding"])
    update.supportsHolding = [[updateMap safeObjectForKey:@"supportsHolding"] boolValue];
  if ([updateMap safeObjectForKey:@"supportsGrouping"])
    update.supportsGrouping = [[updateMap safeObjectForKey:@"supportsGrouping"] boolValue];
  if ([updateMap safeObjectForKey:@"supportsUngrouping"])
    update.supportsUngrouping = [[updateMap safeObjectForKey:@"supportsUngrouping"] boolValue];
  if ([updateMap safeObjectForKey:@"hasVideo"])
    update.hasVideo = [[updateMap safeObjectForKey:@"hasVideo"] boolValue];
  if ([updateMap safeObjectForKey:@"remoteHandle"]) {
    NSDictionary *remoteHandleMap = [updateMap safeObjectForKey:@"remoteHandle"];
    update.remoteHandle =
        [[CXHandle alloc] initWithType:[[remoteHandleMap safeObjectForKey:@"type"] intValue]
                                 value:[remoteHandleMap safeObjectForKey:@"value"]];
  }
  if ([updateMap safeObjectForKey:@"localizedCallerName"])
    update.localizedCallerName = [updateMap safeObjectForKey:@"localizedCallerName"];
  return update;
}

- (NSString *)generateSeqStr {
  ++_seq;
  NSString *seqStr = [NSString stringWithFormat:@"native%u", _seq];
  return seqStr;
}

- (void)hasListeners:(BOOL)hasListeners {
  self.hasListeners = hasListeners;
  // register push 以后 hasListeners 才变为 true， 通过此处补通知
  if (self.isEnableVoIP) {
    [self clearHoldNomalResultArr];
  }
  [[ZPNsUtils getInstance]
      writeCustomLog:[NSString stringWithFormat:@"has listeners:%@", hasListeners ? @"YES" : @"NO"]
          moduleName:@""];
}

- (void)addDicToHoldNomalEventWithName:(NSString *)name body:(NSDictionary *)body {
  if (_holdNomalResultArr == nil) {
    _holdNomalResultArr = [[NSMutableArray alloc] init];
  }
  [_holdNomalResultArr addObject:@[ name, body ]];
}

- (void)clearHoldNomalResultArr {
  if (_holdNomalResultArr == nil) {
    return;
  }
  if ([CallKitManager getInstance].hasListeners == NO) {
    return;
  }
  for (NSArray *eventArr in _holdNomalResultArr) {
    NSString *name = eventArr[0];
    NSDictionary *body = eventArr[1];
    [self.rctCtx sendEventWithName:RN_EVENT(name) body:body];
    [[ZPNsUtils getInstance] writeCustomLog:[NSString stringWithFormat:@"clear hold event:%@", name]
                                 moduleName:@""];
  }
  [_holdNomalResultArr removeAllObjects];
}

- (void)enableVoIP {
  self.isEnableVoIP = YES;
  if (self.voIPToken != nil) {
    [[ZPNs shared] setVoipToken:self.voIPToken isProduct:_isProduct];
  }
}
@end
