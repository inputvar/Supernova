//
//  RCTZPNsSwizzler.m
//  react-native-zego-zpns
//
//  Created by lizhanpeng on 2022/11/16.
//

#import "RCTZPNsSwizzler.h"
#import <objc/runtime.h>
#import "RCTZPNsEventManager.h"

@implementation RCTZPNsSwizzler

+ (void)load {
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    [self hookMethod:@selector(application:didFinishLaunchingWithOptions:)
              andDef:@selector(defaultApplication:didFinishLaunchingWithOptions:)
              andNew:@selector(zpnsHookedApplication:didFinishLaunchingWithOptions:)];

    [self hookMethod:@selector(application:didRegisterForRemoteNotificationsWithDeviceToken:)
              andDef:@selector(defaultApplication:didRegisterForRemoteNotificationsWithDeviceToken:)
              andNew:@selector(zpnsHookedApplication:
                         didRegisterForRemoteNotificationsWithDeviceToken:)];

    [self hookMethod:@selector(application:didFailToRegisterForRemoteNotificationsWithError:)
              andDef:@selector(defaultApplication:didFailToRegisterForRemoteNotificationsWithError:)
              andNew:@selector(zpnsHookedApplication:
                         didFailToRegisterForRemoteNotificationsWithError:)];

    [self hookMethod:@selector(application:didReceiveRemoteNotification:fetchCompletionHandler:)
              andDef:@selector(defaultApplication:
                         didReceiveRemoteNotification:fetchCompletionHandler:)
              andNew:@selector(zpnsHookedApplication:
                         didReceiveRemoteNotification:fetchCompletionHandler:)];
  });
}

+ (void)hookMethod:(SEL)oldSEL andDef:(SEL)defaultSEL andNew:(SEL)newSEL {
  Class oldClass = objc_getClass([@"AppDelegate" UTF8String]);
  Class newClass = [self class];

  class_addMethod(oldClass, newSEL, class_getMethodImplementation(newClass, newSEL), nil);
  class_addMethod(oldClass, oldSEL, class_getMethodImplementation(newClass, defaultSEL), nil);

  Method oldMethod = class_getInstanceMethod(oldClass, oldSEL);
  assert(oldMethod);
  Method newMethod = class_getInstanceMethod(oldClass, newSEL);
  assert(newMethod);
  method_exchangeImplementations(oldMethod, newMethod);
}

- (BOOL)zpnsHookedApplication:(UIApplication *)application
    didFinishLaunchingWithOptions:(NSDictionary *)dic {
  [[ZPNsUtils getInstance]
      writeCustomLog:@"calling zpnsHookedApplicationDidFinishLaunchingWithOptions"
          moduleName:@""];
  [[RCTZPNsEventManager sharedInstance] registerZPNsEventDelegate];
  [self zpnsHookedApplication:application didFinishLaunchingWithOptions:dic];
  return YES;
}

- (void)zpnsHookedApplication:(UIApplication *)application
    didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
  [[ZPNsUtils getInstance]
      writeCustomLog:
          @"calling zpnsHookedApplicationDidRegisterForRemoteNotificationsWithDeviceToken"
          moduleName:@""];
  [[RCTZPNsEventManager sharedInstance] registerDeviceToken:deviceToken];
  [self zpnsHookedApplication:application
      didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
}

- (void)zpnsHookedApplication:(UIApplication *)application
    didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
  [[ZPNsUtils getInstance]
      writeCustomLog:
          @"calling zpnsHookedApplicationDidFailToRegisterForRemoteNotificationsWithError"
          moduleName:@""];
  [[RCTZPNsEventManager sharedInstance] handleZPNsRegisterFailEvent:error];
  [self zpnsHookedApplication:application didFailToRegisterForRemoteNotificationsWithError:error];
}

- (void)zpnsHookedApplication:(UIApplication *)application
    didReceiveRemoteNotification:(NSDictionary *)userInfo
          fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
  [[ZPNsUtils getInstance]
      writeCustomLog:@"calling zpnsHookedApplicationDidReceiveRemoteNotification"
          moduleName:@""];
  [[RCTZPNsEventManager sharedInstance] handleThroughMessageReceivedEvent:userInfo
                                                   fetchCompletionHandler:completionHandler];
  [self zpnsHookedApplication:application
      didReceiveRemoteNotification:userInfo
            fetchCompletionHandler:completionHandler];
}

- (BOOL)defaultApplication:(UIApplication *)application
    didFinishLaunchingWithOptions:(NSDictionary *)dic {
  return YES;
}
- (void)defaultApplication:(UIApplication *)application
    didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
}
- (void)defaultApplication:(UIApplication *)application
    didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
}
- (void)defaultApplication:(UIApplication *)application
    didReceiveRemoteNotification:(NSDictionary *)userInfo
          fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
}

@end
