package im.zego.zpns_reactnative_sdk.internal;

import android.app.ActivityManager;
import android.app.KeyguardManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Handler;
import android.os.Looper;
import android.os.Parcelable;
import android.util.Log;
import com.facebook.react.HeadlessJsTaskService;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import im.zego.zpns.ZPNsMessageReceiver;
import im.zego.zpns.entity.ZPNsMessage;
import im.zego.zpns.entity.ZPNsRegisterMessage;
import im.zego.zpns.enums.ZPNsConstants;
import im.zego.zpns.internal.receiver.FCMMessageService;
import im.zego.zpns_reactnative_sdk.RCTZegoZPNsModule;
import im.zego.zpns_reactnative_sdk.callback.ZPNsBackgroundMessageHandler;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import org.json.JSONObject;

public class ZPNsPluginEventHandler extends ZPNsMessageReceiver {

    private Handler handler;
    private static final String TAG = "ZPNsPluginEventHandler";

    private static ZPNsPluginEventHandler instance;

    public static ZPNsPluginEventHandler getInstance() {
        if (instance == null) {
            synchronized (ZPNsPluginEventHandler.class) {
                if (instance == null) {
                    instance = new ZPNsPluginEventHandler();
                }
            }
        }
        return instance;
    }

    private void sendEvent(final Context context, WritableMap params, String eventName) {
        ZPNsLogWriter.writeLog(
            "sendEvent: " + eventName + ", ctx is null: " + String.valueOf(RCTZegoZPNsModule.reactContext == null),
            ""
        );

        /*if ("throughMessageReceived".equals(eventName)) {
            final Intent service = new Intent(context, ZPNsService.class);
            service.putExtras(Arguments.toBundle(params.getMap("message")));

            HeadlessJsTaskService.acquireWakeLockNow(context);
            ZPNsService.enqueueWork(context, ZPNsService.class, 10000, service, useWakefulService);
        } else if (RCTZegoZPNsModule.reactContext != null) {
            RCTZegoZPNsModule.reactContext
                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit(RCTZegoZPNsModule.Prefix + eventName, params);
        }*/

        if (RCTZegoZPNsModule.reactContext != null) {
            RCTZegoZPNsModule.reactContext
                .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                .emit(RCTZegoZPNsModule.Prefix + eventName, params);
        }
    }

    private Handler getHandler() {
        if (handler == null) {
            this.handler = new Handler(Looper.getMainLooper());
        }
        return this.handler;
    }

    private boolean getUseWakeFulService(ZPNsMessage message) {
        if (message.getPushSource() == ZPNsConstants.PushSource.FCM) {
            try {
                Object fcmMessage = message.getPushMessage();
                Class<?> classz = fcmMessage.getClass();
                Method method = classz.getDeclaredMethod("getPriority");
                method.setAccessible(true);
                int priority = (int) method.invoke(fcmMessage);
                ZPNsLogWriter.writeLog("FCM message priority: " + priority, "");
                return priority == 1;
            } catch (Exception | Error ignored) {}
        }
        return false;
    }

    private void runBackgroundMessageHandler(final Context context, final ZPNsMessage message) {
        try {
            ApplicationInfo appInfo = context
                .getPackageManager()
                .getApplicationInfo(context.getPackageName(), PackageManager.GET_META_DATA);
            String classPath = appInfo.metaData.getString("ZPNsBackgroundMessageHandlerClassPath");
            ZPNsLogWriter.writeLog("ZPNsBackgroundMessageHandlerClassPath: " + classPath, "");
            if (classPath != null) {
                try {
                    Class<?> zpnsHandlerClass = Class.forName(classPath);
                    ZPNsBackgroundMessageHandler zpnsHandlerObj =
                        (ZPNsBackgroundMessageHandler) zpnsHandlerClass.newInstance();
                    zpnsHandlerObj.onThroughMessageReceived(context, message);
                } catch (Exception | Error e) {
                    ZPNsLogWriter.writeLog("ZPNsBackgroundMessageHandlerClassPath: Find class failure", "");
                }
            }
        } catch (Exception | Error e) {
            ZPNsLogWriter.writeLog("ZPNsBackgroundMessageHandlerClassPath: Find ApplicationInfo failure", "");
        }
    }

    public void onThroughForegroundMessage(Context context, ZPNsMessage message) {
        final WritableMap resultMap = Arguments.createMap();
        WritableMap messageMap = Arguments.createMap();
        messageMap.putString("event", "throughMessageReceived");
        messageMap.putString("title", message.getTitle());
        messageMap.putString("content", message.getContent());
        messageMap.putString("extras", message.getExtras());
        messageMap.putInt("pushSourceType", ZPNsConverter.convertPushSourceType(message.getPushSource()));

        resultMap.putMap("message", messageMap);

        getHandler()
            .post(
                new Runnable() {
                    @Override
                    public void run() {
                        sendEvent(context, resultMap, "throughMessageReceived");
                    }
                }
            );
        ZPNsLogWriter.writeLog(
            "onThroughForegroundMessage. title: " +
            message.getTitle() +
            ", content: " +
            message.getContent() +
            ", extras: " +
            message.getExtras(),
            ""
        );
    }

    public void onThroughBackgroundMessage(Context context, ZPNsMessage message) {
        WritableMap messageMap = Arguments.createMap();
        messageMap.putString("event", "throughMessageReceived");
        messageMap.putString("title", message.getTitle());
        messageMap.putString("content", message.getContent());
        messageMap.putString("extras", message.getExtras());
        messageMap.putInt("pushSourceType", ZPNsConverter.convertPushSourceType(message.getPushSource()));

        final boolean useWakefulService = getUseWakeFulService(message);
        final Intent service = new Intent(context, ZPNsService.class);
        service.putExtras(Arguments.toBundle(messageMap));

        HeadlessJsTaskService.acquireWakeLockNow(context);
        ZPNsService.enqueueWork(context, ZPNsService.class, 10000, service, useWakefulService);

        ZPNsLogWriter.writeLog(
            "onThroughBackgroundMessage. title: " +
            message.getTitle() +
            ", content: " +
            message.getContent() +
            ", extras: " +
            message.getExtras(),
            ""
        );
    }

    @Override
    protected void onThroughMessageReceived(final Context context, final ZPNsMessage message) {
        if (message.getPushSource() == ZPNsConstants.PushSource.FCM) {
            Log.i(TAG, "Receive FCM ZPNsMessage. waiting for FCMReceiver to callback event");
            return;
        }

        if (ZPNsPluginUtils.isApplicationForeground(context)) {
            onThroughForegroundMessage(context, message);
        } else {
            onThroughBackgroundMessage(context, message);
        }

        runBackgroundMessageHandler(context, message);
    }

    @Override
    protected void onNotificationClicked(final Context context, ZPNsMessage message) {
        final WritableMap resultMap = Arguments.createMap();
        WritableMap messageMap = Arguments.createMap();
        messageMap.putString("event", "notificationClicked");
        messageMap.putString("title", message.getTitle());
        messageMap.putString("content", message.getContent());
        messageMap.putString("extras", message.getExtras());
        messageMap.putInt("pushSourceType", ZPNsConverter.convertPushSourceType(message.getPushSource()));

        resultMap.putMap("message", messageMap);

        getHandler()
            .post(
                new Runnable() {
                    @Override
                    public void run() {
                        sendEvent(context, resultMap, "notificationClicked");
                    }
                }
            );

        ZPNsLogWriter.writeLog(
            "onNotificationClicked. title: " +
            message.getTitle() +
            ", content: " +
            message.getContent() +
            ", extras: " +
            message.getExtras(),
            ""
        );
    }

    @Override
    protected void onNotificationArrived(final Context context, ZPNsMessage message) {
        final WritableMap resultMap = Arguments.createMap();
        WritableMap messageMap = Arguments.createMap();
        messageMap.putString("event", "notificationArrived");
        messageMap.putString("title", message.getTitle());
        messageMap.putString("content", message.getContent());
        messageMap.putString("extras", message.getExtras());
        messageMap.putInt("pushSourceType", ZPNsConverter.convertPushSourceType(message.getPushSource()));

        resultMap.putMap("message", messageMap);

        getHandler()
            .post(
                new Runnable() {
                    @Override
                    public void run() {
                        sendEvent(context, resultMap, "notificationArrived");
                    }
                }
            );

        ZPNsLogWriter.writeLog(
            "onNotificationArrived. title: " +
            message.getTitle() +
            ", content: " +
            message.getContent() +
            ", extras: " +
            message.getExtras(),
            ""
        );
    }

    @Override
    protected void onRegistered(final Context context, ZPNsRegisterMessage message) {
        int code = message.getErrorCode().getCode();
        String msg = message.getMsg();

        final WritableMap resultMap = Arguments.createMap();
        WritableMap messageMap = Arguments.createMap();
        messageMap.putString("pushID", message.getCommandResult());
        messageMap.putInt("errorCode", code);
        messageMap.putString("msg", msg);

        resultMap.putMap("message", messageMap);

        if (code != 0) {
            ZPNsLogWriter.writeLog("registered failed. code=" + code + ", msg=" + msg, "");
        } else {
            ZPNsLogWriter.writeLog("registered success. pushID: " + message.getCommandResult(), "");
        }

        getHandler()
            .post(
                new Runnable() {
                    @Override
                    public void run() {
                        sendEvent(context, resultMap, "registered");
                    }
                }
            );
    }

    public static HashMap<String, Object> getObjectToMap(Object obj) throws IllegalAccessException {
        HashMap<String, Object> map = new HashMap<String, Object>();
        Class<?> cla = obj.getClass();
        Field[] fields = cla.getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            String keyName = field.getName();
            Object value = field.get(obj);
            if (value == null) value = "";
            map.put(keyName, value);
            field.setAccessible(false);
        }
        return map;
    }
}
