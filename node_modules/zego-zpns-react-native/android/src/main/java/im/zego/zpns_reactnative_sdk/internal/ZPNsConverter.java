package im.zego.zpns_reactnative_sdk.internal;

import android.text.TextUtils;
import android.util.Log;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import im.zego.zim.ZIM;
import im.zego.zpns.entity.ZPNsMessage;
import im.zego.zpns.entity.ZPNsRegisterMessage;
import im.zego.zpns.enums.ZPNsConstants;
import im.zego.zpns.util.ZPNsConfig;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Objects;
import org.json.JSONObject;

public class ZPNsConverter {

    public static ZPNsConfig convertPushConfig(ReadableMap config) {
        ZPNsConfig configObj = new ZPNsConfig();
        configObj.enableHWPush = config.hasKey("enableHWPush") ? config.getBoolean("enableHWPush") : false;
        configObj.enableMiPush = config.hasKey("enableMiPush") ? config.getBoolean("enableMiPush") : false;
        configObj.enableOppoPush = config.hasKey("enableOppoPush") ? config.getBoolean("enableOppoPush") : false;
        configObj.enableVivoPush = config.hasKey("enableVivoPush") ? config.getBoolean("enableVivoPush") : false;
        configObj.enableFCMPush = config.hasKey("enableFCMPush") ? config.getBoolean("enableFCMPush") : false;
        configObj.miAppID = config.hasKey("miAppID") ? config.getString("miAppID") : "";
        configObj.miAppKey = config.hasKey("miAppKey") ? config.getString("miAppKey") : "";
        configObj.oppoAppID = config.hasKey("oppoAppID") ? config.getString("oppoAppID") : "";
        configObj.oppoAppSecret = config.hasKey("oppoAppSecret") ? config.getString("oppoAppSecret") : "";
        configObj.oppoAppKey = config.hasKey("oppoAppKey") ? config.getString("oppoAppKey") : "";
        configObj.vivoAppID = config.hasKey("vivoAppID") ? config.getString("vivoAppID") : "";
        configObj.vivoAppKey = config.hasKey("vivoAppKey") ? config.getString("vivoAppKey") : "";
        configObj.hwAppID = config.hasKey("hwAppID") ? config.getString("hwAppID") : "";

        if (config.hasKey("appType")) {
            configObj.setAppType(config.getInt("appType"));
        }

        return configObj;
    }

    public static HashMap<String, Object> cnvZPNsConfigObjectToMap(ZPNsConfig zpnsConfig) {
        HashMap<String, Object> zpnsConfigMap = new HashMap<>();
        zpnsConfigMap.put("enableHWPush", zpnsConfig.enableHWPush);
        zpnsConfigMap.put("enableMiPush", zpnsConfig.enableMiPush);
        zpnsConfigMap.put("enableVivoPush", zpnsConfig.enableVivoPush);
        zpnsConfigMap.put("enableOppoPush", zpnsConfig.enableOppoPush);
        zpnsConfigMap.put("enableFCMPush", zpnsConfig.enableFCMPush);
        zpnsConfigMap.put("miAppID", zpnsConfig.miAppID);
        zpnsConfigMap.put("miAppKey", zpnsConfig.miAppKey);
        zpnsConfigMap.put("oppoAppID", zpnsConfig.oppoAppID);
        zpnsConfigMap.put("oppoAppSecret", zpnsConfig.oppoAppSecret);
        zpnsConfigMap.put("oppoAppKey", zpnsConfig.oppoAppKey);
        zpnsConfigMap.put("vivoAppID", zpnsConfig.vivoAppID);
        zpnsConfigMap.put("vivoAppKey", zpnsConfig.vivoAppKey);
        zpnsConfigMap.put("hwAppID", zpnsConfig.hwAppID);
        zpnsConfigMap.put("appType", zpnsConfig.getAppType());
        return zpnsConfigMap;
    }

    public static WritableMap convertExtras(String extras) {
        WritableMap extrasMap = Arguments.createMap();

        if (TextUtils.isEmpty(extras) || extras.equals("{}")) {
            return extrasMap;
        }
        try {
            JSONObject jsonObject = new JSONObject(extras);
            Iterator<String> it = jsonObject.keys();
            while (it.hasNext()) {
                String key = it.next();
                Object value = jsonObject.get(key);
                if (value instanceof Integer) {
                    extrasMap.putInt(key, (Integer) value);
                } else if (value instanceof String) {
                    extrasMap.putString(key, (String) value);
                }
            }
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        }

        return extrasMap;
    }

    public static int convertPushSourceType(ZPNsConstants.PushSource sourceType) {
        switch (sourceType) {
            case FCM:
                return 1;
            case HUAWEI:
                return 2;
            case XIAOMI:
                return 3;
            case OPPO:
                return 4;
            case VIVO:
                return 5;
            case ZEGO:
            default:
                return 0;
        }
    }
}
