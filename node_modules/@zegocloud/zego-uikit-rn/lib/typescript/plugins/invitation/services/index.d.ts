import InnerZegoUIKitSignalingPlugin from "../../../signal_plugin";
declare const ZegoUIKitSignalingPluginImpl: {
    getZegoUIKitSignalingPlugin: () => typeof InnerZegoUIKitSignalingPlugin;
    getVersion: () => void;
    init: (appID: number, appSign: string) => void;
    uninit: () => void;
    login: (userID: string, userName: string) => any;
    logout: () => any;
    enableNotifyWhenAppRunningInBackgroundOrQuit: (enable: boolean, isIOSDevelopmentEnvironment?: boolean, appName?: string) => any;
    sendInvitation: (invitees: any[], timeout: number, type: number, data?: string, notificationConfig?: any) => any;
    cancelInvitation: (invitees: any[], data?: string) => any;
    reportZPNsCallKitCallEnded: (uuid: string, reason: number) => any;
    refuseInvitation: (inviterID: string, data?: string) => any;
    acceptInvitation: (inviterID: string, data?: string) => any;
    queryCallList: (count: number, nextFlag?: number) => any;
    onConnectionStateChanged: (callbackID: string, callback?: Function) => void;
    onInvitationReceived: (callbackID: string, callback?: Function) => void;
    onInvitationTimeout: (callbackID: string, callback?: Function) => void;
    onInvitationResponseTimeout: (callbackID: string, callback?: Function) => void;
    onInvitationAccepted: (callbackID: string, callback?: Function) => void;
    onInvitationRefused: (callbackID: string, callback?: Function) => void;
    onInvitationCanceled: (callbackID: string, callback?: Function) => void;
    joinRoom(roomID: string): Promise<unknown>;
    setUsersInRoomAttributes: (key: string, value: any, userIDs: string[]) => Promise<unknown>;
    queryUsersInRoomAttributes: (nextFlag: string, count?: number) => Promise<unknown>;
    onUsersInRoomAttributesUpdated: (callbackID: string, callback?: Function) => void;
    updateRoomProperty(key: string, value: any, isDeleteAfterOwnerLeft: boolean, isForce: boolean, isUpdateOwner: boolean): Promise<unknown>;
    deleteRoomProperties(keys: string[], isForce: boolean): Promise<unknown>;
    beginRoomPropertiesBatchOperation(isDeleteAfterOwnerLeft: boolean, isForce: boolean, isUpdateOwner: boolean): void;
    endRoomPropertiesBatchOperation(): Promise<unknown>;
    queryRoomProperties(): Promise<unknown>;
    onRoomPropertyUpdated(callbackID: string, callback?: Function): void;
    onRoomPropertiesFullUpdated(callbackID: string, callback?: Function): void;
    onInRoomTextMessageReceived(callbackID: string, callback?: Function): void;
};
export default ZegoUIKitSignalingPluginImpl;
