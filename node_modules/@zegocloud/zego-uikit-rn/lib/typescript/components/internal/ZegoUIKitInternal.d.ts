declare const _default: {
    isRoomConnected(): boolean;
    setAudioVideoResourceMode(audioVideoResourceMode: any): void;
    updateRenderingProperty(userID: string, viewID: number, fillMode: string): void;
    onUserInfoUpdate(callbackID: string, callback?: Function): void;
    onSoundLevelUpdate(callbackID: string, callback?: Function): void;
    onSDKConnected(callbackID: string, callback?: Function): void;
    connectSDK(appID: number, appSign: string, userInfo: any): Promise<void>;
    disconnectSDK(): Promise<void>;
    useFrontFacingCamera(isFrontFacing: boolean): Promise<void>;
    isUsingFrontFacingCamera(): boolean;
    isMicDeviceOn(userID: string): any;
    isCameraDeviceOn(userID: string): any;
    enableSpeaker(enable: boolean): Promise<void>;
    audioOutputDeviceType(): number;
    turnMicDeviceOn(userID: string, on: boolean): Promise<void>;
    turnCameraDeviceOn(userID: string, on: boolean): Promise<void>;
    onMicDeviceOn(callbackID: string, callback?: Function): void;
    onCameraDeviceOn(callbackID: string, callback?: Function): void;
    setAudioOutputToSpeaker(isSpeaker: boolean): void;
    onAudioOutputDeviceTypeChange(callbackID: string, callback?: Function): void;
    setAudioConfig(config: any): void;
    setVideoConfig(config: any): void;
    onAudioVideoAvailable(callbackID: string, callback?: Function): void;
    onAudioVideoUnavailable(callbackID: string, callback?: Function): void;
    startPlayingAllAudioVideo(): void;
    stopPlayingAllAudioVideo(): void;
    onTurnOnYourCameraRequest(callbackID: string, callback?: Function): void;
    onTurnOnYourMicrophoneRequest(callbackID: string, callback?: Function): void;
    joinRoom(roomID: string, token: string, markAsLargeRoom?: boolean): Promise<void>;
    leaveRoom(): Promise<void>;
    onRoomStateChanged(callbackID: string, callback?: Function): void;
    onRequireNewToken(callbackID: string, callback?: Function): void;
    setRoomProperty(key: string, value: any): Promise<void>;
    updateRoomProperties(newRoomProperties: any): Promise<void>;
    getRoomProperties(): any;
    onRoomPropertyUpdated(callbackID: string, callback?: Function): void;
    onRoomPropertiesFullUpdated(callbackID: string, callback?: Function): void;
    sendInRoomCommand(command: string, toUserIDs?: string[]): Promise<void>;
    onInRoomCommandReceived(callbackID: string, callback?: Function): void;
    onMeRemovedFromRoom(callbackID: string, callback?: Function): void;
    connectUser(userID: string, userName: string): void;
    disconnectUser(): void;
    getLocalUserInfo(): any;
    getUser(userID: string): any;
    getAllUsers(): any[];
    onUserJoin(callbackID: string, callback?: Function): void;
    onUserLeave(callbackID: string, callback?: Function): void;
    onOnlySelfInRoom(callbackID: string, callback?: Function): void;
    onUserCountOrPropertyChanged(callbackID: string, callback?: Function): void;
    removeUserFromRoom(userIDs?: string[]): Promise<void>;
    getInRoomMessages(): any[];
    sendInRoomMessage(message: string): Promise<unknown>;
    onInRoomMessageReceived(callbackID: string, callback?: Function): void;
    onInRoomMessageSent(callbackID: string, callback?: Function): void;
    notifyUserCountOrPropertyChanged(type: number): void;
    notifyUserInfoUpdate(userID: string): void;
    forceSortMemberList(): void;
    onMemberListForceSort(callbackID: string, callback?: Function): void;
    forceSortAudioVideoList(): void;
    onAudioVideoListForceSort(callbackID: string, callback?: Function): void;
    forceRenderVideoView(): void;
    onVideoViewForceRender(callbackID: string, callback?: Function): void;
    onError(callbackID: string, callback?: Function): void;
    notifyErrorUpdate(method: string, error: number, message: string): void;
};
export default _default;
