import type { ZIMAppConfig, ZIMUserInfo, ZIMCallInviteConfig, ZIMCallCancelConfig, ZIMCallAcceptConfig, ZIMCallRejectConfig, ZIMCallInvitationQueryConfig, ZIMCallInfo } from 'zego-zim-react-native';
import { ZIMConnectionState } from "../defines";
export default class ZegoSignalingPluginCore {
    static shared: ZegoSignalingPluginCore;
    _loginUser: ZIMUserInfo;
    _isLogin: boolean;
    _callIDUsers: Map<string, string>;
    _connectionState: ZIMConnectionState;
    _onConnectionStateChangedCallbackMap: {
        [index: string]: (notifyData: {
            state: ZIMConnectionState;
        }) => void;
    };
    _onCallInvitationReceivedCallbackMap: {
        [index: string]: (notifyData: {
            callID: string;
            inviter: {
                name: string;
                id: string;
            };
            type: number;
            data: string;
        }) => void;
    };
    _onCallInvitationCancelledCallbackMap: {
        [index: string]: (notifyData: {
            callID: string;
            inviter: {
                id: string;
                name: string;
            };
            data: string;
        }) => void;
    };
    _onCallInvitationAcceptedCallbackMap: {
        [index: string]: (notifyData: {
            callID: string;
            invitee: {
                id: string;
                name: string;
            };
            data: string;
        }) => void;
    };
    _onCallInvitationRejectedCallbackMap: {
        [index: string]: (notifyData: {
            callID: string;
            invitee: {
                id: string;
                name: string;
            };
            data: string;
        }) => void;
    };
    _onCallInvitationTimeoutCallbackMap: {
        [index: string]: (notifyData: {
            callID: string;
            inviter: {
                id: string;
                name: string;
            };
            data: string;
        }) => void;
    };
    _onCallInviteesAnsweredTimeoutCallbackMap: {
        [index: string]: (notifyData: {
            callID: string;
            invitees: {
                id: string;
                name: string;
            }[];
            data: string;
        }) => void;
    };
    _currentInvitationID: string;
    constructor();
    static getInstance(): ZegoSignalingPluginCore;
    _registerEngineCallback(): void;
    _unregisterEngineCallback(): void;
    _notifyConnectionStateChanged(notifyData: {
        state: ZIMConnectionState;
    }): void;
    _notifyCallInvitationReceived(notifyData: {
        callID: string;
        inviter: {
            name: string;
            id: string;
        };
        type: number;
        data: string;
    }): void;
    _notifyCallInvitationCancelled(notifyData: {
        callID: string;
        inviter: {
            id: string;
            name: string;
        };
        data: string;
    }): void;
    _notifyCallInvitationAccepted(notifyData: {
        callID: string;
        invitee: {
            id: string;
            name: string;
        };
        data: string;
    }): void;
    _notifyCallInvitationRejected(notifyData: {
        callID: string;
        invitee: {
            id: string;
            name: string;
        };
        data: string;
    }): void;
    _notifyCallInvitationTimeout(notifyData: {
        callID: string;
        inviter: {
            id: string;
            name: string;
        };
        data: string;
    }): void;
    _notifyCallInviteesAnsweredTimeout(notifyData: {
        callID: string;
        invitees: {
            id: string;
            name: string;
        }[];
        data: string;
    }): void;
    _resetData(): void;
    _resetDataForLogout(): void;
    _getInviterIDByCallID(callID: string): string;
    _createHandle(): void;
    getLocalUser(): ZIMUserInfo;
    getCallIDByUserID(userID: string): string;
    getZIMInstance(): any;
    getVersion(): Promise<string>;
    create(appConfig: ZIMAppConfig): void;
    login(userInfo: ZIMUserInfo, token?: string): Promise<void>;
    logout(): Promise<void>;
    destroy(): void;
    invite(invitees: string[], config: ZIMCallInviteConfig): Promise<{
        callID: string;
        errorInvitees: string[];
        code: string;
        message: string;
    }>;
    cancel(invitees: string[], callID: string, config: ZIMCallCancelConfig): Promise<{
        code: string;
        message: string;
        errorInvitees: string[];
    }>;
    accept(callID: string, config: ZIMCallAcceptConfig): Promise<{
        code: string;
        message: string;
    }>;
    reject(callID: string, config: ZIMCallRejectConfig): Promise<{
        code: string;
        message: string;
    }>;
    queryCallList(config: ZIMCallInvitationQueryConfig): Promise<{
        callList: ZIMCallInfo[];
        nextFlag: number;
    }>;
    onConnectionStateChanged(callbackID: string, callback: (notifyData: {
        state: ZIMConnectionState;
    }) => void): void;
    onCallInvitationReceived(callbackID: string, callback: (notifyData: {
        callID: string;
        inviter: {
            name: string;
            id: string;
        };
        type: number;
        data: string;
    }) => void): void;
    onCallInvitationCancelled(callbackID: string, callback: (notifyData: {
        callID: string;
        inviter: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
    onCallInvitationAccepted(callbackID: string, callback: (notifyData: {
        callID: string;
        invitee: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
    onCallInvitationRejected(callbackID: string, callback: (notifyData: {
        callID: string;
        invitee: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
    onCallInvitationTimeout(callbackID: string, callback: (notifyData: {
        callID: string;
        inviter: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
    onCallInviteesAnsweredTimeout(callbackID: string, callback: (notifyData: {
        callID: string;
        invitees: {
            id: string;
            name: string;
        }[];
        data: string;
    }) => void): void;
}
