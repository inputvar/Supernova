import type { CXAction } from 'zego-zpns-react-native';
import type { ZIMConnectionState } from 'zego-zim-react-native';
export default class ZegoPluginInvitationService {
    static shared: ZegoPluginInvitationService;
    _notifyWhenAppRunningInBackgroundOrQuit: boolean;
    _androidOfflineDataHandler: (data: any) => void;
    _iOSOfflineDataHandler: (data: any, uuid: string) => void;
    _callKitAnswerCallHandler: (action: CXAction) => void;
    _callKitEndCallHandler: (action: CXAction) => void;
    constructor();
    static getInstance(): ZegoPluginInvitationService;
    setBackgroundMessageHandler(): void;
    setAndroidOfflineDataHandler(handler: (data: any) => void): void;
    getAndroidOfflineDataHandler(): (data: any) => void;
    setIOSOfflineDataHandler(handler: (data: any, uuid: string) => void): void;
    onCallKitAnswerCall(handler: (action: CXAction) => void): void;
    onCallKitEndCall(handler: (action: CXAction) => void): void;
    getIOSOfflineDataHandler(): (data: any, uuid: string) => void;
    getAnswerCallHandle(): (action: CXAction) => void;
    getEndCallHandle(): (action: CXAction) => void;
    reportCallKitCallEnded(uuid: string, reason: number): any;
    getZIMInstance(): any;
    getVersion(): Promise<string>;
    init(appID: number, appSign: string): void;
    uninit(): void;
    login(userID: string, userName: string, token?: string): Promise<void>;
    logout(): Promise<void>;
    enableNotifyWhenAppRunningInBackgroundOrQuit(enable: boolean, isIOSDevelopmentEnvironment?: boolean, appName?: string): void;
    sendInvitation(inviterName: string, invitees: string[], timeout: number, type: number, data?: string, notificationConfig?: any): Promise<{
        callID: string;
        errorInvitees: string[];
        code: string;
        message: string;
    }>;
    cancelInvitation(invitees: string[], data?: string, notificationConfig?: any): Promise<{
        code: string;
        message: string;
        errorInvitees: string[];
    }>;
    refuseInvitation(inviterID: string, data?: string): Promise<{
        code: string;
        message: string;
    }>;
    acceptInvitation(inviterID: string, data?: string): Promise<{
        code: string;
        message: string;
    }>;
    queryCallList(count: number, nextFlag?: number): Promise<{
        callList: import("zego-zim-react-native").ZIMCallInfo[];
        nextFlag: number;
    }>;
    onConnectionStateChanged(callbackID: string, callback: (notifyData: {
        state: ZIMConnectionState;
    }) => void): void;
    onCallInvitationReceived(callbackID: string, callback: (notifyData: {
        callID: string;
        inviter: {
            name: string;
            id: string;
        };
        type: number;
        data: string;
    }) => void): void;
    onCallInvitationTimeout(callbackID: string, callback: (notifyData: {
        callID: string;
        inviter: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
    onCallInviteesAnsweredTimeout(callbackID: string, callback: (notifyData: {
        callID: string;
        invitees: {
            id: string;
            name: string;
        }[];
        data: string;
    }) => void): void;
    onCallInvitationAccepted(callbackID: string, callback: (notifyData: {
        callID: string;
        invitee: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
    onCallInvitationRejected(callbackID: string, callback: (notifyData: {
        callID: string;
        invitee: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
    onCallInvitationCancelled(callbackID: string, callback: (notifyData: {
        callID: string;
        inviter: {
            id: string;
            name: string;
        };
        data: string;
    }) => void): void;
}
