"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _services = _interopRequireDefault(require("./services"));
var _defines = require("./defines");
var _room_properties_service = _interopRequireDefault(require("./services/room_properties_service"));
var _user_in_room_attributes_service = _interopRequireDefault(require("./services/user_in_room_attributes_service"));
var _class;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ZegoUIKitSignalingPlugin {
  constructor() {
    _defineProperty(this, "_signaling", _defines.ZegoUIKitPluginType.signaling);
    if (!ZegoUIKitSignalingPlugin.shared) {
      ZegoUIKitSignalingPlugin.shared = this;
    }
    return ZegoUIKitSignalingPlugin.shared;
  }
  static getInstance() {
    if (!ZegoUIKitSignalingPlugin.shared) {
      ZegoUIKitSignalingPlugin.shared = new ZegoUIKitSignalingPlugin();
    }
    return ZegoUIKitSignalingPlugin.shared;
  }
  static getVersion() {
    return _services.default.getInstance().getVersion().then(zimVersion => {
      return `signaling_plugin:1.0.0;zim:${zimVersion}`;
    });
  }
  getZIMInstance() {
    return _services.default.getInstance().getZIMInstance();
  }
  getPluginType() {
    return this._signaling;
  }
  setBackgroundMessageHandler() {
    _services.default.getInstance().setBackgroundMessageHandler();
  }
  setAndroidOfflineDataHandler(handler) {
    _services.default.getInstance().setAndroidOfflineDataHandler(handler);
  }
  setIOSOfflineDataHandler(handler) {
    _services.default.getInstance().setIOSOfflineDataHandler(handler);
  }
  onCallKitAnswerCall(handler) {
    _services.default.getInstance().onCallKitAnswerCall(handler);
  }
  onCallKitEndCall(handler) {
    _services.default.getInstance().onCallKitEndCall(handler);
  }
  reportCallKitCallEnded(uuid, reason) {
    _services.default.getInstance().reportCallKitCallEnded(uuid, reason);
  }
  queryCallList(count, nextFlag) {
    return _services.default.getInstance().queryCallList(count, nextFlag);
  }
  invoke(method, params) {
    switch (method) {
      case 'init':
        return _services.default.getInstance().init(params.appID, params.appSign);
      case 'uninit':
        return _services.default.getInstance().uninit();
      case 'login':
        return _services.default.getInstance().login(params.userID, params.userName);
      case 'enableNotifyWhenAppRunningInBackgroundOrQuit':
        return _services.default.getInstance().enableNotifyWhenAppRunningInBackgroundOrQuit(params.enable, params.isIOSDevelopmentEnvironment, params.appName);
      case 'logout':
        return _services.default.getInstance().logout();
      case 'sendInvitation':
        return _services.default.getInstance().sendInvitation(params.inviterName, params.invitees, params.timeout, params.type, params.data, params.notificationConfig);
      case 'cancelInvitation':
        return _services.default.getInstance().cancelInvitation(params.invitees, params.data);
      case 'reportCallKitCallEnded':
        return _services.default.getInstance().reportCallKitCallEnded(params.uuid, params.reason);
      case 'refuseInvitation':
        return _services.default.getInstance().refuseInvitation(params.inviterID, params.data);
      case 'acceptInvitation':
        return _services.default.getInstance().acceptInvitation(params.inviterID, params.data);
      // UserInRoomAttributes
      case 'joinRoom':
        return _user_in_room_attributes_service.default.getInstance().joinRoom(params.roomID);
      case 'leaveRoom':
        return _user_in_room_attributes_service.default.getInstance().leaveRoom();
      case 'setUsersInRoomAttributes':
        return _user_in_room_attributes_service.default.getInstance().setUsersInRoomAttributes(params.key, params.value, params.userIDs);
      case 'queryUsersInRoomAttributes':
        return _user_in_room_attributes_service.default.getInstance().queryUsersInRoomAttributes(params.nextFlag, params.count);
      // RoomProperties
      case 'updateRoomProperty':
        return _room_properties_service.default.getInstance().updateRoomProperty(params.key, params.value, params.isDeleteAfterOwnerLeft, params.isForce, params.isUpdateOwner);
      case 'deleteRoomProperties':
        return _room_properties_service.default.getInstance().deleteRoomProperties(params.keys, params.isForce);
      case 'beginRoomPropertiesBatchOperation':
        return _room_properties_service.default.getInstance().beginRoomPropertiesBatchOperation(params.isDeleteAfterOwnerLeft, params.isForce, params.isUpdateOwner);
      case 'endRoomPropertiesBatchOperation':
        return _room_properties_service.default.getInstance().endRoomPropertiesBatchOperation();
      case 'queryRoomProperties':
        return _room_properties_service.default.getInstance().queryRoomProperties();
      default:
        return Promise.reject();
    }
  }
  registerPluginEventHandler(event, callbackID, callback) {
    switch (event) {
      case 'connectionStateChanged':
        _services.default.getInstance().onConnectionStateChanged(callbackID, callback);
        break;
      case 'invitationReceived':
        _services.default.getInstance().onCallInvitationReceived(callbackID, callback);
        break;
      case 'invitationTimeout':
        _services.default.getInstance().onCallInvitationTimeout(callbackID, callback);
        break;
      case 'invitationResponseTimeout':
        _services.default.getInstance().onCallInviteesAnsweredTimeout(callbackID, callback);
        break;
      case 'invitationAccepted':
        _services.default.getInstance().onCallInvitationAccepted(callbackID, callback);
        break;
      case 'invitationRefused':
        _services.default.getInstance().onCallInvitationRejected(callbackID, callback);
        break;
      case 'invitationCanceled':
        _services.default.getInstance().onCallInvitationCancelled(callbackID, callback);
        break;
      // UserInRoomAttributes
      case 'usersInRoomAttributesUpdated':
        _user_in_room_attributes_service.default.getInstance().onUsersInRoomAttributesUpdated(callbackID, callback);
        break;
      // RoomProperties
      case 'roomPropertyUpdated':
        _room_properties_service.default.getInstance().onRoomPropertyUpdated(callbackID, callback);
        break;
      case 'inRoomTextMessageReceived':
        _room_properties_service.default.getInstance().onInRoomTextMessageReceived(callbackID, callback);
        break;
      default:
        break;
    }
  }
}
exports.default = ZegoUIKitSignalingPlugin;
_class = ZegoUIKitSignalingPlugin;
_defineProperty(ZegoUIKitSignalingPlugin, "shared", void 0);
//# sourceMappingURL=index.js.map