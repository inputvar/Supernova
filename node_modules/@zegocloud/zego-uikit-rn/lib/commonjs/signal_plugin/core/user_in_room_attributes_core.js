"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _logger = require("../utils/logger");
var _defines = _interopRequireDefault(require("./defines"));
var _ZegoUIKitCorePlugin = _interopRequireDefault(require("../../components/internal/ZegoUIKitCorePlugin"));
var _class;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class ZegoPluginUserInRoomAttributesCore {
  constructor() {
    _defineProperty(this, "_isJoinRoom", false);
    _defineProperty(this, "_roomBaseInfo", {});
    // { roomID: '', roomName: '' }
    _defineProperty(this, "_onUsersInRoomAttributesUpdatedCallbackMap", {});
    if (!ZegoPluginUserInRoomAttributesCore.shared) {
      ZegoPluginUserInRoomAttributesCore.shared = this;
    }
    return ZegoPluginUserInRoomAttributesCore.shared;
  }
  static getInstance() {
    if (!ZegoPluginUserInRoomAttributesCore.shared) {
      ZegoPluginUserInRoomAttributesCore.shared = new ZegoPluginUserInRoomAttributesCore();
    }
    return ZegoPluginUserInRoomAttributesCore.shared;
  }
  // ------- internal events register ------
  _registerEngineCallback() {
    _ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance().on('roomMemberAttributesUpdated', (zim, _ref) => {
      let {
        roomID,
        infos,
        operatedInfo
      } = _ref;
      (0, _logger.zloginfo)(`[ZegoPluginUserInRoomAttributesCore]NotifyUsersInRoomAttributesUpdated`, infos, operatedInfo);
      this._notifyUsersInRoomAttributesUpdated({
        infos: infos.map(info => info.attributesInfo),
        editor: operatedInfo.userID
      });
    });
    (0, _logger.zloginfo)('[ZegoPluginUserInRoomAttributesCore]Register callback for ZIM...');
  }
  _unregisterEngineCallback() {
    (0, _logger.zloginfo)('[ZegoPluginUserInRoomAttributesCore]Unregister callback from ZIM...');
    _ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance().off('roomMemberAttributesUpdated');
  }
  // ------- internal utils ------
  _resetData() {
    this._resetDataForLeaveRoom();
  }
  _resetDataForLeaveRoom() {
    this._roomBaseInfo = {};
    this._isJoinRoom = false;
  }
  // ------- internal events exec ------
  _notifyUsersInRoomAttributesUpdated(notifyData) {
    Object.keys(this._onUsersInRoomAttributesUpdatedCallbackMap).forEach(callbackID => {
      if (this._onUsersInRoomAttributesUpdatedCallbackMap[callbackID]) {
        this._onUsersInRoomAttributesUpdatedCallbackMap[callbackID](notifyData);
      }
    });
  }
  // ------- external method ------
  joinRoom(roomID) {
    if (!_ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance()) {
      (0, _logger.zlogerror)('[ZegoPluginUserInRoomAttributesCore]Please initialize it first.');
      return Promise.reject();
    }
    return new Promise((resolve, reject) => {
      if (!this._isJoinRoom) {
        _ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance().enterRoom({
          roomID,
          roomName: roomID
        }).then(_ref2 => {
          let {
            roomInfo
          } = _ref2;
          (0, _logger.zloginfo)(`[ZegoPluginUserInRoomAttributesCore]Join the room successfully.`);
          this._roomBaseInfo = roomInfo.baseInfo;
          this._isJoinRoom = true;
          resolve(new _defines.default('', ''));
        }).catch(error => {
          (0, _logger.zlogerror)(`[ZegoPluginUserInRoomAttributesCore]Failed to join the room, code: ${error.code}, message: ${error.message}`);
          reject(error);
        });
      } else {
        (0, _logger.zloginfo)('[ZegoPluginUserInRoomAttributesCore]Join room already success.');
        resolve(new _defines.default('', ''));
      }
    });
  }
  leaveRoom() {
    if (!_ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance()) {
      (0, _logger.zlogerror)('[ZegoPluginUserInRoomAttributesCore]Please initialize it first.');
      return Promise.reject();
    }
    if (!this._roomBaseInfo.roomID) {
      (0, _logger.zlogerror)('[ZegoPluginUserInRoomAttributesCore]Please join the room first.');
      return Promise.reject();
    }
    return new Promise((resolve, reject) => {
      _ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance().leaveRoom(this._roomBaseInfo.roomID).then(() => {
        (0, _logger.zloginfo)(`[ZegoPluginUserInRoomAttributesCore]Leave the room successfully.`);
        this._resetDataForLeaveRoom();
        resolve(new _defines.default('', ''));
      }).catch(error => {
        (0, _logger.zlogerror)(`[ZegoPluginUserInRoomAttributesCore]Failed to leave the room, code: ${error.code}, message: ${error.message}`);
        reject(error);
      });
    });
  }
  getRoomBaseInfo() {
    return this._roomBaseInfo;
  }
  setUsersInRoomAttributes(attributes, userIDs) {
    if (!_ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance()) {
      (0, _logger.zlogerror)('[ZegoPluginUserInRoomAttributesCore]Please initialize it first.');
      return Promise.reject();
    }
    return new Promise((resolve, reject) => {
      _ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance().setRoomMembersAttributes(attributes, userIDs, this._roomBaseInfo.roomID, {
        isDeleteAfterOwnerLeft: true
      }).then(_ref3 => {
        let {
          roomID,
          infos,
          errorUserList
        } = _ref3;
        (0, _logger.zloginfo)(`[ZegoPluginUserInRoomAttributesCore]Set attributes of users in room successfully.`);
        resolve({
          ...new _defines.default('', ''),
          errorUserList,
          infos
        });
      }).catch(error => {
        (0, _logger.zlogerror)(`[ZegoPluginUserInRoomAttributesCore]Failed to set the user's attributes, code: ${error.code}, message: ${error.message}`);
        reject(error);
      });
    });
  }
  queryUsersInRoomAttributes(config) {
    if (!_ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance()) {
      (0, _logger.zlogerror)('[ZegoPluginUserInRoomAttributesCore]Please initialize it first.');
      return Promise.reject();
    }
    return new Promise((resolve, reject) => {
      _ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance().queryRoomMemberAttributesList(this._roomBaseInfo.roomID, config).then(_ref4 => {
        let {
          roomID,
          infos,
          nextFlag: resNextFlag
        } = _ref4;
        (0, _logger.zloginfo)(`[ZegoPluginUserInRoomAttributesCore]Query attributes of users in room successfully.`);
        const params = {
          ...new _defines.default('', ''),
          nextFlag: resNextFlag,
          infos
        };
        resolve(params);
      }).catch(error => {
        (0, _logger.zlogerror)(`[ZegoPluginUserInRoomAttributesCore]Failed to query the user's attributes, code: ${error.code}, message: ${error.message}`);
        reject(error);
      });
    });
  }
  // ------- external events register ------
  onUsersInRoomAttributesUpdated(callbackID, callback) {
    if (!_ZegoUIKitCorePlugin.default.getZIMPlugin().default.getInstance()) {
      (0, _logger.zlogerror)('[ZegoPluginUserInRoomAttributesCore]Please initialize it first.');
    }
    if (typeof callback !== 'function') {
      if (callbackID in this._onUsersInRoomAttributesUpdatedCallbackMap) {
        (0, _logger.zloginfo)('[Core][onUsersInRoomAttributesUpdated] Remove callback for: [', callbackID, '] because callback is not a valid function!');
        delete this._onUsersInRoomAttributesUpdatedCallbackMap[callbackID];
      }
    } else {
      this._onUsersInRoomAttributesUpdatedCallbackMap[callbackID] = callback;
    }
  }
}
exports.default = ZegoPluginUserInRoomAttributesCore;
_class = ZegoPluginUserInRoomAttributesCore;
_defineProperty(ZegoPluginUserInRoomAttributesCore, "shared", void 0);
//# sourceMappingURL=user_in_room_attributes_core.js.map