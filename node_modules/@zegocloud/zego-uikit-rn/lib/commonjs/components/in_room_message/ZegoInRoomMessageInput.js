"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _ZegoUIKitInternal = _interopRequireDefault(require("../internal/ZegoUIKitInternal"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// https://github.com/react-native-community/hooks#usekeyboard
class ZegoInRoomMessageInput extends _react.default.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "textInput", void 0);
    _defineProperty(this, "iconPath", void 0);
    _defineProperty(this, "state", void 0);
    this.textInput = /*#__PURE__*/_react.default.createRef();
    this.state = {
      textInputHeight: 45,
      contentWidth: 0,
      currentText: ""
    };
    this.iconPath = {
      // @ts-ignore
      enable: this.props.iconSend ? this.props.iconSend : require('../internal/resources/white_button_send_in_room_message_enable.png'),
      // @ts-ignore
      disable: this.props.iconSendDisable ? this.props.iconSendDisable : this.props.iconSend ? this.props.iconSend : require('../internal/resources/white_button_send_in_room_message_disable.png')
    };
  }
  focus() {
    this.textInput.current.focus();
  }
  blur() {
    this.textInput.current.blur();
  }
  clear() {
    this.textInput.current.clear();
    this.setState({
      textInputHeight: 45,
      contentWidth: 0,
      currentText: ""
    });
    // @ts-ignore
    if (typeof this.props.onContentSizeChange == 'function') {
      // @ts-ignore
      this.props.onContentSizeChange(0, 45);
    }
  }
  _sumit() {
    if (this.state.currentText != '') {
      _ZegoUIKitInternal.default.sendInRoomMessage(this.state.currentText);
      this.clear();
      this.blur();
      // @ts-ignore
      if (typeof this.props.onSumit == 'function') {
        // @ts-ignore
        this.props.onSumit();
      }
    }
  }
  render() {
    return (
      /*#__PURE__*/
      // @ts-ignore
      _react.default.createElement(_reactNative.View, {
        style: [styles.container, {
          height: this.state.textInputHeight,
          backgroundColor: this.props.backgroundColor ? this.props.backgroundColor : 'rgba(0, 0, 0, 0.7500)'
        }]
      }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: styles.textInputContainer
      }, /*#__PURE__*/_react.default.createElement(_reactNative.TextInput, {
        ref: this.textInput,
        style: [styles.textInput],
        blurOnSubmit: true,
        multiline: true,
        autoFocus: true
        // @ts-ignore
        ,
        editable: this.props.enable ? this.props.enable : true,
        selectionColor: '#A653FF'
        // @ts-ignore
        ,
        placeholder: this.props.placeholder ? this.props.placeholder : '',
        placeholderTextColor: 'rgba(255, 255, 255, 0.2)',
        onContentSizeChange: _ref => {
          let {
            nativeEvent: {
              contentSize: {
                width,
                height
              }
            }
          } = _ref;
          var h = height;
          // https://github.com/facebook/react-native/issues/29702
          if (_reactNative.Platform.OS == 'ios') {
            h = height + 25;
          }
          this.setState({
            textInputHeight: h,
            contentWidth: width
          });
          // @ts-ignore
          if (typeof this.props.onContentSizeChange == 'function') {
            // @ts-ignore
            this.props.onContentSizeChange(width, h);
          }
        },
        onChangeText: text => {
          this.setState({
            currentText: text
          });
        },
        onSubmitEditing: () => this._sumit()
      })), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
        style: styles.sendButton,
        onPress: () => {
          this._sumit();
        }
      }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
        resizeMode: "contain",
        style: styles.icon,
        source: this.state.currentText && this.state.currentText != "" ? this.iconPath.enable : this.iconPath.disable
      })))
    );
  }
}
var _default = exports.default = ZegoInRoomMessageInput;
const styles = _reactNative.StyleSheet.create({
  sendButton: {
    position: 'absolute',
    right: 10,
    bottom: 8,
    width: 29,
    height: 29,
    justifyContent: 'center',
    alignItems: 'center'
  },
  icon: {
    position: 'absolute',
    width: '100%',
    height: '100%'
  },
  textInput: {
    color: 'white',
    paddingTop: 12.5,
    paddingBottom: 12.5
  },
  textInputContainer: {
    marginLeft: 15,
    paddingRight: 59,
    height: '100%',
    width: '100%'
  },
  container: {
    position: 'absolute',
    borderTopLeftRadius: 12,
    borderTopRightRadius: 12,
    width: '100%'
  }
});
//# sourceMappingURL=ZegoInRoomMessageInput.js.map