var _class;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import ZegoSignalingPluginCore from '../core';
import ZegoPluginResult from '../core/defines';
import { zlogerror, zloginfo } from '../utils/logger';
import ZegoUIKitCorePlugin from '../../components/internal/ZegoUIKitCorePlugin';
import { Platform } from 'react-native';
export default class ZegoPluginInvitationService {
  constructor() {
    _defineProperty(this, "_notifyWhenAppRunningInBackgroundOrQuit", void 0);
    _defineProperty(this, "_androidOfflineDataHandler", void 0);
    _defineProperty(this, "_iOSOfflineDataHandler", void 0);
    _defineProperty(this, "_callKitAnswerCallHandler", void 0);
    _defineProperty(this, "_callKitEndCallHandler", void 0);
    if (!ZegoPluginInvitationService.shared) {
      this._notifyWhenAppRunningInBackgroundOrQuit = true;
      ZegoPluginInvitationService.shared = this;
    }
    return ZegoPluginInvitationService.shared;
  }
  static getInstance() {
    if (!ZegoPluginInvitationService.shared) {
      ZegoPluginInvitationService.shared = new ZegoPluginInvitationService();
    }
    return ZegoPluginInvitationService.shared;
  }
  setBackgroundMessageHandler() {
    ZegoUIKitCorePlugin.getZPNsPlugin().default.setBackgroundMessageHandler(message => {
      zloginfo('ZPNs setBackgroundMessageHandler: ', message);
      const dataObj = JSON.parse(message.extras.payload);
      dataObj.zim_call_id = message.extras.call_id;
      ZegoPluginInvitationService.getInstance().getAndroidOfflineDataHandler()(dataObj);
    });
  }
  setAndroidOfflineDataHandler(handler) {
    this._androidOfflineDataHandler = handler;
  }
  getAndroidOfflineDataHandler() {
    return this._androidOfflineDataHandler;
  }
  setIOSOfflineDataHandler(handler) {
    this._iOSOfflineDataHandler = handler;
  }
  onCallKitAnswerCall(handler) {
    this._callKitAnswerCallHandler = handler;
  }
  onCallKitEndCall(handler) {
    this._callKitEndCallHandler = handler;
  }
  getIOSOfflineDataHandler() {
    return this._iOSOfflineDataHandler;
  }
  getAnswerCallHandle() {
    return this._callKitAnswerCallHandler;
  }
  getEndCallHandle() {
    return this._callKitEndCallHandler;
  }
  reportCallKitCallEnded(uuid, reason) {
    return ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().reportCallEnded(reason, uuid);
  }
  getZIMInstance() {
    return ZegoSignalingPluginCore.getInstance().getZIMInstance();
  }
  getVersion() {
    return ZegoSignalingPluginCore.getInstance().getVersion();
  }
  init(appID, appSign) {
    ZegoSignalingPluginCore.getInstance().create({
      appID,
      appSign
    });
  }
  uninit() {
    ZegoSignalingPluginCore.getInstance().destroy();
  }
  login(userID, userName, token) {
    return ZegoSignalingPluginCore.getInstance().login({
      userID,
      userName
    }, token);
  }
  logout() {
    return ZegoSignalingPluginCore.getInstance().logout();
  }
  enableNotifyWhenAppRunningInBackgroundOrQuit(enable, isIOSDevelopmentEnvironment, appName) {
    this._notifyWhenAppRunningInBackgroundOrQuit = enable;
    if (enable) {
      if (Platform.OS === 'ios') {
        const CXProviderConfiguration = {
          localizedName: appName ?? 'My app',
          iconTemplateImageName: "AppIcon"
        };
        ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.setInitConfiguration(CXProviderConfiguration);
        ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().applyNotificationPermission();
        const iOSEnvironment = isIOSDevelopmentEnvironment == null ? 2 : isIOSDevelopmentEnvironment ? 1 : 0;
        console.log('#########registerPush, iOSEnvironment', iOSEnvironment);
        ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().registerPush({
          enableIOSVoIP: true,
          iOSEnvironment: iOSEnvironment
        });
      } else {
        ZegoUIKitCorePlugin.getZPNsPlugin().default.setPushConfig({
          "enableFCMPush": true,
          "enableHWPush": false,
          "enableMiPush": false,
          "enableOppoPush": false,
          "enableVivoPush": false
        });
        ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().registerPush({
          enableIOSVoIP: true
        });
      }
      ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().on("registered", message => {
        console.log("@@@@@@@@@@@@@@@@>>>>>>>>>>>>>>>############", message);
      });

      // ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().on("notificationArrived", (message) => {
      //   console.log("@@@@@@@@@@@@@@@@notificationArrived>>>>>>>>>>>>>>>############", getCallID(message))
      //   setZpnState("notificationArrived: " + getCallID(message))
      // })
      // ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().on("notificationClicked", (message) => {
      //   console.log("@@@@@@@@@@@@@@@@notificationClicked>>>>>>>>>>>>>>>############", getCallID(message))
      //   setZpnState("notificationClicked: " + getCallID(message))
      // })
      // ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().on("throughMessageReceived", (message) => {
      //   console.log("@@@@@@@@@@@@@@@@throughMessageReceived>>>>>>>>>>>>>>>############", getCallID(message))
      //   setZpnState("throughMessageReceived: " + getCallID(message))
      // })

      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("didReceiveIncomingPush", (extras, uuid) => {
        console.log('#########didReceiveIncomingPush', extras, uuid);
        let {
          payload
        } = extras;
        let {
          call_id
        } = extras;
        const dataObj = payload ? JSON.parse(payload) : {};
        dataObj.zim_call_id = call_id;
        ZegoPluginInvitationService.getInstance().getIOSOfflineDataHandler()(dataObj, uuid);
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("providerDidReset", () => {
        console.log('#########providerDidReset');
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("providerDidBegin", () => {
        console.log('#########providerDidBegin');
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("didActivateAudioSession", () => {
        console.log('#########didActivateAudioSession');
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("didDeactivateAudioSession", () => {
        console.log('#########didDeactivateAudioSession');
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("timedOutPerformingAction", action => {
        console.log('#########timedOutPerformingAction', action);
        action.fulfill();
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("performStartCallAction", action => {
        console.log('#########performStartCallAction', action);
        action.fulfill();
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("performAnswerCallAction", action => {
        console.log('#########performAnswerCallAction', action);
        ZegoPluginInvitationService.getInstance().getAnswerCallHandle()(action);
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("performEndCallAction", action => {
        console.log('#########performEndCallAction', action);
        ZegoPluginInvitationService.getInstance().getEndCallHandle()(action);
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("performSetHeldCallAction", action => {
        console.log('#########performSetHeldCallAction', action);
        action.fulfill();
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("performSetMutedCallAction", action => {
        console.log('#########performSetMutedCallAction', action);
        action.fulfill();
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("performSetGroupCallAction", action => {
        console.log('#########performSetGroupCallAction', action);
        action.fulfill();
      });
      ZegoUIKitCorePlugin.getZPNsPlugin().CallKit.getInstance().on("performPlayDTMFCallAction", action => {
        console.log('#########performPlayDTMFCallAction', action);
        action.fulfill();
      });
    } else {
      if (ZegoUIKitCorePlugin.getZPNsPlugin()) {
        // ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().unregisterPush();
        ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().off("registered");
        // ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().off("notificationArrived")
        // ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().off("notificationClicked")
        // ZegoUIKitCorePlugin.getZPNsPlugin().default.getInstance().off("throughMessageReceived")
      }
    }
  }

  sendInvitation(inviterName, invitees, timeout, type, data, notificationConfig) {
    // invitees = invitees.map((invitee) => invitee);
    if (!invitees.length) {
      zlogerror('[Service]Send invitees is empty.');
      return Promise.reject(new ZegoPluginResult());
    }
    const config = {
      timeout
    };
    config.extendedData = JSON.stringify({
      inviter_name: inviterName,
      type,
      data
    });
    if (this._notifyWhenAppRunningInBackgroundOrQuit) {
      config.pushConfig = {
        title: notificationConfig.title ?? "",
        content: notificationConfig.message ?? "",
        resourcesID: notificationConfig.resourceID ?? "",
        payload: data
      };
    }
    zloginfo(`[Service]Send invitation: invitees: ${invitees}, timeout: ${timeout}, type: ${type}, data: ${data}.`);
    return ZegoSignalingPluginCore.getInstance().invite(invitees, config);
  }
  cancelInvitation(invitees, data, notificationConfig) {
    invitees = invitees.map(invitee => invitee);
    if (!invitees.length) {
      zlogerror('[Service]Cancel invitees is empty.');
      return Promise.reject(new ZegoPluginResult());
    }
    const config = {
      extendedData: data
    };
    if (this._notifyWhenAppRunningInBackgroundOrQuit) {
      config.pushConfig = {
        title: notificationConfig && notificationConfig.title,
        content: notificationConfig && notificationConfig.message,
        resourcesID: notificationConfig && notificationConfig.resourceID,
        payload: data
      };
    }
    const callID = ZegoSignalingPluginCore.getInstance().getCallIDByUserID(ZegoSignalingPluginCore.getInstance().getLocalUser().userID);
    zloginfo(`[Service]Cancel invitation: callID: ${callID}, invitees: ${invitees}, data: ${data}.`);
    return ZegoSignalingPluginCore.getInstance().cancel(invitees, callID, config);
  }
  refuseInvitation(inviterID, data) {
    let callID;
    // Parse data and adapt automatic rejection
    if (data) {
      const dataObj = JSON.parse(data);
      callID = dataObj.callID;
    } else {
      callID = ZegoSignalingPluginCore.getInstance().getCallIDByUserID(inviterID);
    }
    if (!callID) {
      zlogerror('[Service]Call id corresponding to the inviterID is empty.');
      return Promise.reject(new ZegoPluginResult());
    }
    const config = {
      extendedData: data
    };
    zloginfo(`[Service]Refuse invitation: callID: ${callID}, inviter id: ${inviterID}, data: ${data}.`);
    return ZegoSignalingPluginCore.getInstance().reject(callID, config);
  }
  acceptInvitation(inviterID, data) {
    const callID = ZegoSignalingPluginCore.getInstance().getCallIDByUserID(inviterID);
    if (!callID) {
      zloginfo('[Service]Call id corresponding to the inviterID is empty.', inviterID, data);
      return Promise.reject(new ZegoPluginResult());
    }
    const config = {
      extendedData: data
    };
    zloginfo(`[Service]Accept invitation: callID: ${callID}, inviter id: ${inviterID}, data: ${data}.`);
    return ZegoSignalingPluginCore.getInstance().accept(callID, config);
  }
  queryCallList(count, nextFlag) {
    const config = {
      count: count,
      nextFlag: nextFlag
    };
    return ZegoSignalingPluginCore.getInstance().queryCallList(config);
  }
  onConnectionStateChanged(callbackID, callback) {
    ZegoSignalingPluginCore.getInstance().onConnectionStateChanged(callbackID, callback);
  }
  onCallInvitationReceived(callbackID, callback) {
    ZegoSignalingPluginCore.getInstance().onCallInvitationReceived(callbackID, callback);
  }
  onCallInvitationTimeout(callbackID, callback) {
    ZegoSignalingPluginCore.getInstance().onCallInvitationTimeout(callbackID, callback);
  }
  onCallInviteesAnsweredTimeout(callbackID, callback) {
    ZegoSignalingPluginCore.getInstance().onCallInviteesAnsweredTimeout(callbackID, callback);
  }
  onCallInvitationAccepted(callbackID, callback) {
    ZegoSignalingPluginCore.getInstance().onCallInvitationAccepted(callbackID, callback);
  }
  onCallInvitationRejected(callbackID, callback) {
    ZegoSignalingPluginCore.getInstance().onCallInvitationRejected(callbackID, callback);
  }
  onCallInvitationCancelled(callbackID, callback) {
    ZegoSignalingPluginCore.getInstance().onCallInvitationCancelled(callbackID, callback);
  }
}
_class = ZegoPluginInvitationService;
_defineProperty(ZegoPluginInvitationService, "shared", void 0);
//# sourceMappingURL=index.js.map