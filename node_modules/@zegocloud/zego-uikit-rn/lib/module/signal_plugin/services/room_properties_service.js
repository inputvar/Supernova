var _class;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import ZegoPluginRoomPropertiesCore from '../core/room_properties_core';
export default class ZegoPluginRoomPropertiesService {
  constructor() {
    if (!ZegoPluginRoomPropertiesService.shared) {
      ZegoPluginRoomPropertiesService.shared = this;
    }
    return ZegoPluginRoomPropertiesService.shared;
  }
  static getInstance() {
    if (!ZegoPluginRoomPropertiesService.shared) {
      ZegoPluginRoomPropertiesService.shared = new ZegoPluginRoomPropertiesService();
    }
    return ZegoPluginRoomPropertiesService.shared;
  }
  updateRoomProperty(key, value, isDeleteAfterOwnerLeft) {
    let isForce = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let isUpdateOwner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    const attributes = {
      [key]: value
    };
    const config = {
      isForce,
      isDeleteAfterOwnerLeft,
      isUpdateOwner
    };
    return ZegoPluginRoomPropertiesCore.getInstance().updateRoomProperty(attributes, config);
  }
  deleteRoomProperties() {
    let keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    let isForce = arguments.length > 1 ? arguments[1] : undefined;
    const config = {
      isForce
    };
    return ZegoPluginRoomPropertiesCore.getInstance().deleteRoomProperties(keys, config);
  }
  beginRoomPropertiesBatchOperation() {
    let isDeleteAfterOwnerLeft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    let isForce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let isUpdateOwner = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const config = {
      isDeleteAfterOwnerLeft,
      isForce,
      isUpdateOwner
    };
    return ZegoPluginRoomPropertiesCore.getInstance().beginRoomPropertiesBatchOperation(config);
  }
  endRoomPropertiesBatchOperation() {
    return ZegoPluginRoomPropertiesCore.getInstance().endRoomPropertiesBatchOperation();
  }
  queryRoomProperties() {
    return ZegoPluginRoomPropertiesCore.getInstance().queryRoomProperties();
  }
  onRoomPropertyUpdated(callbackID, callback) {
    ZegoPluginRoomPropertiesCore.getInstance().onRoomPropertyUpdated(callbackID, callback);
  }
  onInRoomTextMessageReceived(callbackID, callback) {
    ZegoPluginRoomPropertiesCore.getInstance().onInRoomTextMessageReceived(callbackID, callback);
  }
}
_class = ZegoPluginRoomPropertiesService;
_defineProperty(ZegoPluginRoomPropertiesService, "shared", void 0);
//# sourceMappingURL=room_properties_service.js.map