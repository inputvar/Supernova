var _class;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { zlogerror, zloginfo } from '../utils/logger';
import ZegoPluginResult from './defines';
import ZegoPluginUserInRoomAttributesCore from './user_in_room_attributes_core';
import ZegoUIKitCorePlugin from "../../components/internal/ZegoUIKitCorePlugin";
export default class ZegoPluginRoomPropertiesCore {
  constructor() {
    _defineProperty(this, "_onRoomPropertyUpdatedCallbackMap", {});
    _defineProperty(this, "_onInRoomTextMessageReceivedCallbackMap", {});
    if (!ZegoPluginRoomPropertiesCore.shared) {
      ZegoPluginRoomPropertiesCore.shared = this;
    }
    return ZegoPluginRoomPropertiesCore.shared;
  }
  static getInstance() {
    if (!ZegoPluginRoomPropertiesCore.shared) {
      ZegoPluginRoomPropertiesCore.shared = new ZegoPluginRoomPropertiesCore();
    }
    return ZegoPluginRoomPropertiesCore.shared;
  }
  // ------- internal events register ------
  _registerEngineCallback() {
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().on('roomAttributesUpdated', (zim, _ref) => {
      let {
        roomID,
        infos
      } = _ref;
      zloginfo(`[ZegoPluginRoomPropertiesCore]NotifyRoomPropertiesUpdated`, infos);
      infos.forEach(info => {
        this._notifyRoomPropertiesUpdated(info);
      });
    });
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().on('roomAttributesBatchUpdated', (zim, _ref2) => {
      let {
        roomID,
        infos
      } = _ref2;
      zloginfo(`[ZegoPluginRoomPropertiesCore]NotifyRoomPropertiesUpdated`, infos);
      infos.forEach(info => {
        this._notifyRoomPropertiesUpdated(info);
      });
    });
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().on('receiveRoomMessage', (zim, _ref3) => {
      let {
        messageList,
        fromConversationID
      } = _ref3;
      this._notifyInRoomTextMessageReceived({
        messageList,
        fromConversationID
      });
    });
    zloginfo('[ZegoPluginRoomPropertiesCore]Register callback for ZIM...');
  }
  _unregisterEngineCallback() {
    zloginfo('[ZegoPluginRoomPropertiesCore]Unregister callback from ZIM...');
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().off('roomAttributesUpdated');
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().off('roomAttributesBatchUpdated');
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().off('receiveRoomMessage');
  }
  // ------- internal events exec ------
  _notifyRoomPropertiesUpdated(notifyData) {
    Object.keys(this._onRoomPropertyUpdatedCallbackMap).forEach(callbackID => {
      if (this._onRoomPropertyUpdatedCallbackMap[callbackID]) {
        this._onRoomPropertyUpdatedCallbackMap[callbackID](notifyData);
      }
    });
  }
  _notifyInRoomTextMessageReceived(notifyData) {
    Object.keys(this._onInRoomTextMessageReceivedCallbackMap).forEach(callbackID => {
      if (this._onInRoomTextMessageReceivedCallbackMap[callbackID]) {
        this._onInRoomTextMessageReceivedCallbackMap[callbackID](notifyData);
      }
    });
  }
  // ------- external method ------
  updateRoomProperty(attributes, config) {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
      return Promise.reject();
    }
    const roomID = ZegoPluginUserInRoomAttributesCore.getInstance().getRoomBaseInfo().roomID;
    return new Promise((resolve, reject) => {
      ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().setRoomAttributes(attributes, roomID, config).then(_ref4 => {
        let {
          roomID: resRoomID,
          errorKeys
        } = _ref4;
        zloginfo(`[ZegoPluginRoomPropertiesCore]Update the room properties successfully.`);
        resolve({
          ...new ZegoPluginResult('', ''),
          errorKeys
        });
      }).catch(error => {
        zlogerror(`[ZegoPluginRoomPropertiesCore]Failed to update room properties, code: ${error.code}, message: ${error.message}`);
        reject(error);
      });
    });
  }
  deleteRoomProperties(keys, config) {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
      return Promise.reject();
    }
    const roomID = ZegoPluginUserInRoomAttributesCore.getInstance().getRoomBaseInfo().roomID;
    return new Promise((resolve, reject) => {
      ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().deleteRoomAttributes(keys, roomID, config).then(_ref5 => {
        let {
          roomID: resRoomID,
          errorKeys
        } = _ref5;
        zloginfo(`[ZegoPluginRoomPropertiesCore]Delete the room properties successfully.`);
        resolve({
          ...new ZegoPluginResult('', ''),
          errorKeys
        });
      }).catch(error => {
        zlogerror(`[ZegoPluginRoomPropertiesCore]Failed to delete room properties, code: ${error.code}, message: ${error.message}`);
        reject(error);
      });
    });
  }
  beginRoomPropertiesBatchOperation(config) {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
      return Promise.reject();
    }
    const roomID = ZegoPluginUserInRoomAttributesCore.getInstance().getRoomBaseInfo().roomID;
    ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().beginRoomAttributesBatchOperation(roomID, config);
    zloginfo(`[ZegoPluginRoomPropertiesCore]Begin batch operate room properties successfully.`);
  }
  endRoomPropertiesBatchOperation() {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
      return Promise.reject();
    }
    const roomID = ZegoPluginUserInRoomAttributesCore.getInstance().getRoomBaseInfo().roomID;
    return new Promise((resolve, reject) => {
      ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().endRoomAttributesBatchOperation(roomID).then(_ref6 => {
        let {
          roomID: resRoomID
        } = _ref6;
        zloginfo(`[ZegoPluginRoomPropertiesCore]End batch operate room properties successfully.`);
        resolve(new ZegoPluginResult('', ''));
      }).catch(error => {
        zlogerror(`[ZegoPluginRoomPropertiesCore]Failed to end batch operate room properties, code: ${error.code}, message: ${error.message}`);
        reject(error);
      });
    });
  }
  queryRoomProperties() {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
      return Promise.reject();
    }
    const roomID = ZegoPluginUserInRoomAttributesCore.getInstance().getRoomBaseInfo().roomID;
    return new Promise((resolve, reject) => {
      ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance().queryRoomAllAttributes(roomID).then(_ref7 => {
        let {
          roomID: resRoomID,
          roomAttributes
        } = _ref7;
        zloginfo(`[ZegoPluginRoomPropertiesCore]Query room all attributes successfully.`);
        resolve({
          roomAttributes,
          ...new ZegoPluginResult('', '')
        });
      }).catch(error => {
        zlogerror(`[ZegoPluginRoomPropertiesCore]Failed to query room all properties, code: ${error.code}, message: ${error.message}`);
        reject(error);
      });
    });
  }
  onRoomPropertyUpdated(callbackID, callback) {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
    }
    if (typeof callback !== 'function') {
      if (callbackID in this._onRoomPropertyUpdatedCallbackMap) {
        zloginfo('[Core][onRoomPropertyUpdated] Remove callback for: [', callbackID, '] because callback is not a valid function!');
        delete this._onRoomPropertyUpdatedCallbackMap[callbackID];
      }
    } else {
      this._onRoomPropertyUpdatedCallbackMap[callbackID] = callback;
    }
  }
  onInRoomTextMessageReceived(callbackID, callback) {
    if (!ZegoUIKitCorePlugin.getZIMPlugin().default.getInstance()) {
      zlogerror('[ZegoPluginRoomPropertiesCore]Please initialize it first.');
    }
    if (typeof callback !== 'function') {
      if (callbackID in this._onInRoomTextMessageReceivedCallbackMap) {
        zloginfo('[Core][onRoomPropertyUpdated] Remove callback for: [', callbackID, '] because callback is not a valid function!');
        delete this._onInRoomTextMessageReceivedCallbackMap[callbackID];
      }
    } else {
      this._onInRoomTextMessageReceivedCallbackMap[callbackID] = callback;
    }
  }
}
_class = ZegoPluginRoomPropertiesCore;
_defineProperty(ZegoPluginRoomPropertiesCore, "shared", void 0);
//# sourceMappingURL=room_properties_core.js.map