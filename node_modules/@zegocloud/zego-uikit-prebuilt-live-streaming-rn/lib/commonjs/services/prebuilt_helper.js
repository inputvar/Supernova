"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defines = require("./defines");
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class PrebuiltHelper {
  constructor() {
    _defineProperty(this, "_realTimeData", {
      role: _defines.ZegoLiveStreamingRole.audience,
      hostID: '',
      liveStatus: '',
      requestCoHostCount: 0,
      memberConnectStateMap: {}
    });
    _defineProperty(this, "_stateData", {
      memberConnectStateMap: {}
    });
    _defineProperty(this, "_notifyData", {});
    _defineProperty(this, "_onZegoDialogTriggerCallbackMap", {});
  }
  static getInstance() {
    return this._instance || (this._instance = new PrebuiltHelper());
  }
  // Use reference types directly, so the set method is not provided here
  getRealTimeData() {
    return this._realTimeData;
  }
  getStateData() {
    return this._stateData;
  }
  getNotifyData() {
    return this._notifyData;
  }
  clearRealTimeData() {
    this._realTimeData = {
      role: _defines.ZegoLiveStreamingRole.audience,
      hostID: '',
      liveStatus: '',
      requestCoHostCount: 0,
      memberConnectStateMap: {}
    };
  }
  clearState() {
    this._stateData = {
      memberConnectStateMap: {}
    };
  }
  clearNotify() {
    this._notifyData = {};
  }
  notifyZegoDialogTrigger(visable) {
    Object.keys(this._onZegoDialogTriggerCallbackMap).forEach(callbackID => {
      if (this._onZegoDialogTriggerCallbackMap[callbackID]) {
        this._onZegoDialogTriggerCallbackMap[callbackID](visable);
      }
    });
  }
  // Temporarily resolved an issue where dialog shutdown could not be triggered
  onZegoDialogTrigger(callbackID, callback) {
    if (typeof callback !== 'function') {
      delete this._onZegoDialogTriggerCallbackMap[callbackID];
    } else {
      this._onZegoDialogTriggerCallbackMap[callbackID] = callback;
    }
  }
}
exports.default = PrebuiltHelper;
_defineProperty(PrebuiltHelper, "_instance", void 0);
//# sourceMappingURL=prebuilt_helper.js.map