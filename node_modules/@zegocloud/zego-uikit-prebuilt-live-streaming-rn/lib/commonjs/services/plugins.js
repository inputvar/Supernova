"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _zegoUikitRn = _interopRequireWildcard(require("@zegocloud/zego-uikit-rn"));
var _logger = require("../utils/logger");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const _appInfo = {};
const _localUser = {};
let _pluginConnectionState;
let ZIMKitPlugin = null;
const _install = plugins => {
  _zegoUikitRn.default.installPlugins(plugins);
  plugins.forEach(plugin => {
    if (plugin.ZIMKit) {
      (0, _logger.zloginfo)('[Plugins] install ZIMKit success.');
      ZIMKitPlugin = plugin;
    } else if (plugin.default && typeof plugin.default.getModuleName === 'function') {
      const temp = plugin.default.getModuleName();
      if (temp === 'ZIMKit') {
        (0, _logger.zloginfo)('[Plugins] install ZIMKit success.');
        ZIMKitPlugin = plugin;
      }
    }
  });
};
const ZegoPrebuiltPlugins = {
  init: (appID, appSign, userID, userName, plugins) => {
    const callbackID = 'ZegoPrebuiltPlugins' + String(Math.floor(Math.random() * 10000));
    _install(plugins);
    if (_zegoUikitRn.default.getPlugin(_zegoUikitRn.ZegoUIKitPluginType.signaling)) {
      _zegoUikitRn.default.getSignalingPlugin().init(appID, appSign);
      _zegoUikitRn.default.getSignalingPlugin().onConnectionStateChanged(callbackID, _ref => {
        let {
          state
        } = _ref;
        _pluginConnectionState = state;
      });
      _appInfo.appID = appID;
      _appInfo.appSign = appSign;
      _localUser.userID = userID;
      _localUser.userName = userName;
      return _zegoUikitRn.default.getSignalingPlugin().login(userID, userName).then(() => {
        (0, _logger.zloginfo)('[Plugins] login success.');
        return true;
      });
    } else {
      (0, _logger.zloginfo)('[Plugins]The signal plugin passed in is empty');
      return Promise.resolve(false);
    }
  },
  joinRoom(roomID) {
    if (_zegoUikitRn.default.getPlugin(_zegoUikitRn.ZegoUIKitPluginType.signaling)) {
      return _zegoUikitRn.default.getSignalingPlugin().joinRoom(roomID).then(() => {
        (0, _logger.zloginfo)('[Plugins] join room success.');
        return true;
      });
    } else {
      (0, _logger.zloginfo)('[Plugins]The signal plugin passed in is empty');
      return Promise.resolve(false);
    }
  },
  reconnectIfDisconnected: () => {
    if (_zegoUikitRn.default.getPlugin(_zegoUikitRn.ZegoUIKitPluginType.signaling)) {
      (0, _logger.zloginfo)('[Plugins] reconnectIfDisconnected', _pluginConnectionState, _zegoUikitRn.ZegoInvitationConnectionState.disconnected);
      if (_pluginConnectionState === _zegoUikitRn.ZegoInvitationConnectionState.disconnected) {
        _zegoUikitRn.default.getSignalingPlugin().logout().then(() => {
          (0, _logger.zloginfo)('[Plugins] auto logout success.');
          _zegoUikitRn.default.getSignalingPlugin().login(_localUser.userID, _localUser.userName).then(() => {
            (0, _logger.zloginfo)('[Plugins] auto reconnect success.');
          });
        });
      }
    } else {
      (0, _logger.zloginfo)('[Plugins]The signal plugin passed in is empty');
    }
  },
  uninit: () => {
    if (_zegoUikitRn.default.getPlugin(_zegoUikitRn.ZegoUIKitPluginType.signaling)) {
      _zegoUikitRn.default.getSignalingPlugin().logout();
      _zegoUikitRn.default.getSignalingPlugin().uninit();
    }
  },
  getLocalUser: () => {
    return _localUser;
  },
  getAppInfo: () => {
    return _appInfo;
  },
  getZIMKitPlugin: () => {
    return ZIMKitPlugin;
  }
};
var _default = ZegoPrebuiltPlugins;
exports.default = _default;
//# sourceMappingURL=plugins.js.map