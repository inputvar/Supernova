"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.grantPermissions = exports.getShotName = exports.getMethodReturnValue = exports.durationFormat = void 0;
var _reactNative = require("react-native");
const getShotName = name => {
  if (!name) {
    return '';
  }
  const nl = name.split(' ');
  var shotName = '';
  nl.forEach(part => {
    if (part !== '') {
      shotName += part.substring(0, 1);
    }
  });
  return shotName;
};
exports.getShotName = getShotName;
const grantPermissions = async callback => {
  // Android: Dynamically obtaining device permissions
  if (_reactNative.Platform.OS === 'android') {
    // Check if permission granted
    let grantedAudio = _reactNative.PermissionsAndroid.check(_reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO);
    let grantedCamera = _reactNative.PermissionsAndroid.check(_reactNative.PermissionsAndroid.PERMISSIONS.CAMERA);
    const ungrantedPermissions = [];
    try {
      const isAudioGranted = await grantedAudio;
      const isVideoGranted = await grantedCamera;
      if (!isAudioGranted) {
        ungrantedPermissions.push(_reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO);
      }
      if (!isVideoGranted) {
        ungrantedPermissions.push(_reactNative.PermissionsAndroid.PERMISSIONS.CAMERA);
      }
    } catch (error) {
      ungrantedPermissions.push(_reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO, _reactNative.PermissionsAndroid.PERMISSIONS.CAMERA);
    }
    // If not, request it
    return _reactNative.PermissionsAndroid.requestMultiple(ungrantedPermissions).then(() => {
      if (callback) {
        callback();
      }
    });
  } else if (callback) {
    callback();
  }
};
exports.grantPermissions = grantPermissions;
const durationFormat = duration => {
  let s = duration || 0;
  let m = 0;
  let h = 0;
  if (s >= 60) {
    m = parseInt(`${s / 60}`);
    s = parseInt(`${s % 60}`);
    if (m >= 60) {
      h = parseInt(`${m / 60}`);
      m = parseInt(`${m % 60}`);
    }
  }
  let result = `${s}`;
  if (s < 10) {
    result = `0${result}`;
  }
  if (m > 0) {
    result = `${m}:${result}`;
    if (m < 10) {
      result = `0${result}`;
    }
  } else {
    result = `00:${result}`;
  }
  if (h > 0) {
    result = `${h}:${result}`;
    if (h < 10) {
      result = `0${result}`;
    }
  } else {
    // result = `00:${result}`;
  }
  return result;
};
exports.durationFormat = durationFormat;
const getMethodReturnValue = async func => {
  let result = true;
  if (func) {
    if (typeof func === 'object' && typeof func.then === 'function' && typeof func.catch === 'function') {
      // Promise
      try {
        result = await func;
      } catch (error) {
        result = false;
      }
    } else if (typeof func === 'function') {
      const temp = func();
      if (typeof temp === 'object' && typeof temp.then === 'function' && typeof temp.catch === 'function') {
        try {
          result = await temp;
        } catch (error) {
          result = false;
        }
      } else {
        result = temp;
      }
    }
  }
  return result;
};
exports.getMethodReturnValue = getMethodReturnValue;
//# sourceMappingURL=index.js.map