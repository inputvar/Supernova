"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZegoCoHostControlButton;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ZegoRequestCoHostButton = _interopRequireDefault(require("./ZegoRequestCoHostButton"));
var _ZegoCancelRequestCoHostButton = _interopRequireDefault(require("./ZegoCancelRequestCoHostButton"));
var _ZegoEndCoHostButton = _interopRequireDefault(require("./ZegoEndCoHostButton"));
var _defines = require("../services/defines");
var _zegoUikitRn = _interopRequireDefault(require("@zegocloud/zego-uikit-rn"));
var _logger = require("../utils/logger");
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ZegoCoHostControlButton(props) {
  const {
    hostID,
    liveStatus,
    isPluginsInit,
    memberConnectState = _defines.ZegoCoHostConnectState.idle,
    onConnectStateChanged,
    setIsToastVisable,
    setToastExtendedData,
    setIsDialogVisable,
    setDialogExtendedData
  } = props;
  const ZegoCoHostControlButtonType = {
    request: 0,
    cancel: 1,
    end: 2
  };
  const coHostControlHandle = btnType => {
    let newConnectState = memberConnectState;
    if (btnType === ZegoCoHostControlButtonType.request) {
      newConnectState = _defines.ZegoCoHostConnectState.connecting;
    } else if (btnType === ZegoCoHostControlButtonType.cancel) {
      newConnectState = _defines.ZegoCoHostConnectState.idle;
    } else if (btnType === ZegoCoHostControlButtonType.end) {
      newConnectState = _defines.ZegoCoHostConnectState.idle;
    }
    onConnectStateChanged('', newConnectState);
  };
  (0, _react.useEffect)(() => {
    const callbackID = 'ZegoCoHostControlButton' + String(Math.floor(Math.random() * 10000));
    if (isPluginsInit) {
      // Plugins init success and register plugins callback
      (0, _logger.zloginfo)('[ZegoCoHostControlButton]Plugins init success and register plugins callback');
      _zegoUikitRn.default.getSignalingPlugin().onInvitationResponseTimeout(callbackID, () => {
        // The host did not process your cohost request, resulting in a timeout
        console.log('#######onInvitationResponseTimeout, The host did not process your cohost request, resulting in a timeout');
        onConnectStateChanged('', _defines.ZegoCoHostConnectState.idle, true);
      });
      _zegoUikitRn.default.getSignalingPlugin().onInvitationAccepted(callbackID, async () => {
        // The host accepted your cohost request
        console.log('#######onInvitationAccepted, The host accepted your cohost request');
        try {
          await (0, _utils.grantPermissions)();
        } catch (error) {}
        _zegoUikitRn.default.turnCameraOn('', true);
        _zegoUikitRn.default.turnMicrophoneOn('', true);
        onConnectStateChanged('', _defines.ZegoCoHostConnectState.connected, true);
      });
      _zegoUikitRn.default.getSignalingPlugin().onInvitationRefused(callbackID, () => {
        // The host rejected your cohost request
        console.log('#######onInvitationRefused, The host rejected your cohost request');
        onConnectStateChanged('', _defines.ZegoCoHostConnectState.idle, true);
        setIsToastVisable(true);
        setToastExtendedData({
          type: _defines.ZegoToastType.error,
          text: _defines.ZegoTranslationText.hostRejectCoHostRequestToast
        });
      });
    }
    return () => {
      if (isPluginsInit) {
        _zegoUikitRn.default.getSignalingPlugin().onInvitationResponseTimeout(callbackID);
        _zegoUikitRn.default.getSignalingPlugin().onInvitationAccepted(callbackID);
        _zegoUikitRn.default.getSignalingPlugin().onInvitationRefused(callbackID);
      }
    };
  }, [isPluginsInit]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.btnContainer
  }, memberConnectState === _defines.ZegoCoHostConnectState.idle ? /*#__PURE__*/_react.default.createElement(_ZegoRequestCoHostButton.default, {
    hostID: hostID,
    liveStatus: liveStatus
    // @ts-ignore
    ,
    onRequestSuccessfully: coHostControlHandle.bind(this, ZegoCoHostControlButtonType.request),
    setIsToastVisable: setIsToastVisable,
    setToastExtendedData: setToastExtendedData
  }) : memberConnectState === _defines.ZegoCoHostConnectState.connecting ? /*#__PURE__*/_react.default.createElement(_ZegoCancelRequestCoHostButton.default, {
    hostID: hostID
    // @ts-ignore
    ,
    onCancelSuccessfully: coHostControlHandle.bind(this, ZegoCoHostControlButtonType.cancel),
    setIsToastVisable: setIsToastVisable,
    setToastExtendedData: setToastExtendedData
  }) : memberConnectState === _defines.ZegoCoHostConnectState.connected ? /*#__PURE__*/_react.default.createElement(_ZegoEndCoHostButton.default
  // @ts-ignore
  , {
    onEndSuccessfully: coHostControlHandle.bind(this, ZegoCoHostControlButtonType.end),
    setIsDialogVisable: setIsDialogVisable,
    setDialogExtendedData: setDialogExtendedData
  }) : null);
}
const styles = _reactNative.StyleSheet.create({
  btnContainer: {}
});
//# sourceMappingURL=ZegoCoHostControlButton.js.map