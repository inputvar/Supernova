"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZegoEnableChatButton;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _zegoUikitRn = _interopRequireDefault(require("@zegocloud/zego-uikit-rn"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ZegoEnableChatButton(props) {
  const {
    width = 36,
    height = 36,
    borderRadius = 1000,
    iconOn = require('../resources/white_bottom_button_chat_on.png'),
    iconOff = require('../resources/white_bottom_button_chat_off.png')
  } = props;
  const enableChat = _zegoUikitRn.default.getRoomProperties().enableChat;
  const [isChatOn, setIsChatOn] = (0, _react.useState)(enableChat === undefined || enableChat === '1');
  const getCustomStyle = (width, height, borderRadius) => _reactNative.StyleSheet.create({
    enableChatButton: {
      width,
      height,
      borderRadius
    }
  });
  const pressedHandle = () => {
    _zegoUikitRn.default.updateRoomProperties({
      enableChat: isChatOn ? '0' : '1'
    }).then(() => {
      setIsChatOn(!isChatOn);
    });
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: pressedHandle,
    style: [styles.enableChatButton, getCustomStyle(width, height, borderRadius).enableChatButton]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
    source: isChatOn ? iconOn : iconOff,
    style: {
      width: "100%",
      height: "100%"
    }
  }));
}
const styles = _reactNative.StyleSheet.create({
  enableChatButton: {
    alignItems: 'center',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=ZegoEnableChatButton.js.map