"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZegoBottomBar;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _zegoUikitRn = require("@zegocloud/zego-uikit-rn");
var _ZegoMoreButton = _interopRequireDefault(require("./ZegoMoreButton"));
var _ZegoMessageButton = _interopRequireDefault(require("./ZegoMessageButton"));
var _ZegoMenuBarButtonName = _interopRequireDefault(require("./ZegoMenuBarButtonName"));
var _ZegoCoHostControlButton = _interopRequireDefault(require("./ZegoCoHostControlButton"));
var _ZegoEnableChatButton = _interopRequireDefault(require("./ZegoEnableChatButton"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ZegoBottomBar(props) {
  const {
    menuBarButtonsMaxCount = 5,
    menuBarButtons = [],
    menuBarExtendedButtons = [],
    onLeaveLiveStreaming,
    onLeaveLiveStreamingConfirming,
    turnOnCameraWhenJoining,
    turnOnMicrophoneWhenJoining,
    useSpeakerWhenJoining,
    onMoreButtonPress,
    onMessageButtonPress,
    showInRoomMessageButton = false,
    onConnectStateChanged,
    setIsToastVisable,
    setToastExtendedData,
    setIsDialogVisable,
    setDialogExtendedData,
    userID,
    hostID,
    liveStatus,
    isPluginsInit,
    memberConnectState
  } = props;
  const [isNormalStyle, setIsNormalStyle] = (0, _react.useState)(true);
  const getButtonByButtonIndex = (buttonIndex, isFirstLevel) => {
    const buttonSize = isFirstLevel ? 36 : 48;
    switch (buttonIndex) {
      case _ZegoMenuBarButtonName.default.leaveButton:
        return /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoLeaveButton, {
          key: buttonIndex,
          onLeaveConfirmation: onLeaveLiveStreamingConfirming,
          onPressed: onLeaveLiveStreaming,
          iconLeave: require("../resources/white_bottom_button_close.png"),
          width: buttonSize,
          height: buttonSize
        });
      case _ZegoMenuBarButtonName.default.toggleCameraButton:
        return /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoToggleCameraButton, {
          key: buttonIndex,
          isOn: turnOnCameraWhenJoining,
          width: buttonSize,
          height: buttonSize
        });
      case _ZegoMenuBarButtonName.default.toggleMicrophoneButton:
        return /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoToggleMicrophoneButton, {
          key: buttonIndex,
          isOn: turnOnMicrophoneWhenJoining,
          width: buttonSize,
          height: buttonSize
        });
      case _ZegoMenuBarButtonName.default.switchCameraButton:
        return /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoSwitchCameraButton, {
          key: buttonIndex,
          width: buttonSize,
          height: buttonSize
        });
      case _ZegoMenuBarButtonName.default.switchAudioOutputButton:
        return /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoSwitchAudioOutputButton, {
          key: buttonIndex,
          useSpeaker: useSpeakerWhenJoining,
          width: buttonSize,
          height: buttonSize
        });
      case _ZegoMenuBarButtonName.default.coHostControlButton:
        return /*#__PURE__*/_react.default.createElement(_ZegoCoHostControlButton.default, {
          key: buttonIndex,
          hostID: hostID,
          liveStatus: liveStatus,
          isPluginsInit: isPluginsInit,
          memberConnectState: memberConnectState,
          onConnectStateChanged: onConnectStateChanged,
          setIsToastVisable: setIsToastVisable,
          setToastExtendedData: setToastExtendedData,
          setIsDialogVisable: setIsDialogVisable,
          setDialogExtendedData: setDialogExtendedData
        });
      case _ZegoMenuBarButtonName.default.enableChatButton:
        return /*#__PURE__*/_react.default.createElement(_ZegoEnableChatButton.default, {
          width: buttonSize,
          height: buttonSize
        });
    }
  };
  const getDisplayButtons = () => {
    var maxCount = menuBarButtonsMaxCount < 1 ? 1 : menuBarButtonsMaxCount;
    maxCount = maxCount > 5 ? 5 : maxCount;
    const needMoreButton = menuBarButtons.length + menuBarExtendedButtons.length > maxCount;
    const firstLevelButtons = [];
    const secondLevelButtons = [];
    menuBarButtons.forEach(buttonIndex => {
      const limitCount = needMoreButton ? maxCount - 1 : maxCount;
      if (firstLevelButtons.length < limitCount) {
        firstLevelButtons.push(getButtonByButtonIndex(buttonIndex, true));
      } else {
        secondLevelButtons.push(getButtonByButtonIndex(buttonIndex, false));
      }
    });
    menuBarExtendedButtons.forEach(button => {
      const limitCount = needMoreButton ? maxCount - 1 : maxCount;
      if (firstLevelButtons.length < limitCount) {
        firstLevelButtons.push(button, true);
      } else {
        secondLevelButtons.push(button, false);
      }
    });
    if (needMoreButton) {
      firstLevelButtons.push( /*#__PURE__*/_react.default.createElement(_ZegoMoreButton.default, {
        onPress: () => {
          setIsNormalStyle(false);
          if (onMoreButtonPress) onMoreButtonPress();
        }
      }));
    }
    return {
      firstLevelButtons: firstLevelButtons,
      secondLevelButtons: secondLevelButtons
    };
  };
  var allButtons = getDisplayButtons();
  var firstLevelButtons = allButtons['firstLevelButtons'];
  var secondLevelButtons = allButtons['secondLevelButtons'];
  return isNormalStyle ? /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.normalBar
  }, showInRoomMessageButton ? /*#__PURE__*/_react.default.createElement(_ZegoMessageButton.default, {
    userID: userID,
    hostID: hostID,
    onPress: () => {
      if (typeof onMessageButtonPress == 'function') {
        onMessageButtonPress();
      }
    }
  }) : null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.rightBar
  }, firstLevelButtons.map((button, index) => /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.rightBtn,
    key: 'firstLevel' + index
  }, button)))) : /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.popupContainer, styles.fillParent]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.popupMask, styles.fillParent]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: styles.fillParent,
    onPress: () => {
      setIsNormalStyle(true);
    }
  })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.popupBar
  }, secondLevelButtons.map((button, index) => /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      marginBottom: 20,
      marginRight: 32 / 2,
      marginLeft: 32 / 2
    },
    key: 'secondLevel' + index
  }, button))));
}
const styles = _reactNative.StyleSheet.create({
  messageButton: {
    position: 'absolute',
    alignSelf: 'flex-start',
    width: 16,
    height: 16
  },
  rightBar: {
    flex: 1,
    position: 'absolute',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'flex-end',
    alignSelf: 'flex-end',
    zIndex: 2
  },
  normalBar: {
    position: 'absolute',
    justifyContent: 'flex-end',
    marginLeft: 16,
    marginBottom: 16,
    left: 0,
    right: 0,
    height: 50,
    bottom: 25,
    zIndex: 2
  },
  popupContainer: {
    position: 'absolute',
    flex: 1,
    justifyContent: 'flex-end'
  },
  fillParent: {
    position: 'absolute',
    width: '100%',
    height: '100%'
  },
  popupMask: {
    backgroundColor: '#262A2D',
    opacity: 0.5
  },
  popupBar: {
    flex: 1,
    paddingTop: 27,
    paddingBottom: 3,
    paddingLeft: 28.5,
    paddingRight: 28.5,
    position: 'absolute',
    flexDirection: 'row',
    flexWrap: "wrap",
    justifyContent: 'flex-start',
    alignItems: 'flex-end',
    width: '100%',
    bottom: 0,
    zIndex: 2,
    backgroundColor: '#262A2D'
  },
  rightBtn: {
    marginRight: 16
  }
});
//# sourceMappingURL=ZegoBottomBar.js.map