"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZegoCoHostMenuDialog;
var _react = _interopRequireWildcard(require("react"));
var _zegoUikitRn = _interopRequireWildcard(require("@zegocloud/zego-uikit-rn"));
var _reactNative = require("react-native");
var _defines = require("../services/defines");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ZegoCoHostMenuDialog(props) {
  const countdownMap = (0, _react.useRef)();
  const countdownTimerMap = (0, _react.useRef)();
  const {
    visable,
    inviteeID,
    invitationType = _defines.ZegoInvitationType.inviteToCoHost,
    onCancel,
    onOk,
    setIsToastVisable,
    setToastExtendedData,
    resetTimer
  } = props;
  if (visable) {
    const inviteeCountdown = countdownMap.current.get(inviteeID);
    if (!inviteeCountdown) {
      countdownMap.current.set(inviteeID, 60);
    }
  }
  if (resetTimer) {
    // Reset invitation timer
    clearInterval(countdownTimerMap.current.get(inviteeID));
    countdownMap.current.set(inviteeID, 60);
    countdownTimerMap.current.set(inviteeID, null);
  }
  const getCustomContainerStyle = visable => _reactNative.StyleSheet.create({
    customContainer: {
      display: visable ? 'flex' : 'none'
    }
  });
  // Verify whether invitations can be sent
  const willPressedHandle = () => {
    let result = true;
    if (invitationType === _defines.ZegoInvitationType.inviteToCoHost) {
      // Check whether the timer is running out
      console.log('#########Timer: Check whether the timer is running out', countdownMap.current, countdownTimerMap.current);
      if (countdownTimerMap.current.get(inviteeID)) {
        // The timer did not complete and the request was not allowed to occur
        console.log('#########Timer: The timer did not complete and the request was not allowed to occur', countdownMap.current, countdownTimerMap.current);
        setIsToastVisable(true);
        setToastExtendedData({
          type: _defines.ZegoToastType.error,
          text: _defines.ZegoTranslationText.repeatInviteCoHostFailedToast
        });
        onCancel();
        result = false;
      } else {
        // Restart timer
        clearInterval(countdownTimerMap.current.get(inviteeID));
        countdownTimerMap.current.set(inviteeID, setInterval(() => {
          console.log('#########Timer: countdown', countdownMap.current, countdownTimerMap.current);
          if (countdownMap.current.get(inviteeID) === 0) {
            clearInterval(countdownTimerMap.current.get(inviteeID));
            countdownTimerMap.current.set(inviteeID, null);
            countdownMap.current.set(inviteeID, 60);
          } else {
            countdownMap.current.set(inviteeID, countdownMap.current.get(inviteeID) - 1);
          }
        }, 1000));
        if (!_zegoUikitRn.default.getUser(inviteeID)) {
          result = false;
          setIsToastVisable(true);
          setToastExtendedData({
            type: _defines.ZegoToastType.error,
            text: _defines.ZegoTranslationText.inviteCoHostFailedToast
          });
          onCancel();
        }
      }
    }
    return result;
  };
  const removeHandle = () => {
    _zegoUikitRn.default.removeUserFromRoom([inviteeID]).then(() => {
      console.log(`remove ${inviteeID} from room successfully`);
      // The handling here is the same as the cancel
      onCancel();
    });
  };
  (0, _react.useEffect)(() => {
    // First render initializes and clears timer
    console.log('#########Timer: First render initializes and clears timer', countdownMap.current, countdownTimerMap.current);
    countdownMap.current = new Map();
    countdownTimerMap.current = new Map();
    return () => {
      // Initializes and clears timer when component is destroyed
      console.log('#########Timer: Initializes and clears timer when component is destroyed', countdownMap.current, countdownTimerMap.current);
      Array.from(countdownTimerMap.current.keys()).forEach(key => {
        clearInterval(countdownTimerMap.current.get(key));
        countdownTimerMap.current.set(key, null);
      });
    };
  }, []);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.container, getCustomContainerStyle(visable).customContainer]
  }, /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoSendInvitationButton, {
    backgroundColor: 'transparent',
    width: "100%",
    height: 50,
    fontSize: 14,
    color: "#fff",
    text: invitationType === _defines.ZegoInvitationType.inviteToCoHost ? _defines.ZegoTranslationText.inviteCoHostButton.replace('%0', inviteeID) : _defines.ZegoTranslationText.removeCoHostButton,
    invitees: [inviteeID],
    type: invitationType,
    onWillPressed: willPressedHandle,
    onPressed: onOk
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.divide
  }), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: styles.removeButton,
    onPress: removeHandle
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.removeText
  }, _defines.ZegoTranslationText.removeUserMenuDialogButton.replace('%0', inviteeID))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.divide
  }), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: styles.cancelButton,
    onPress: onCancel
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.cancelText
  }, _defines.ZegoTranslationText.cancelMenuDialogButton)));
}
const styles = _reactNative.StyleSheet.create({
  container: {
    width: '100%',
    zIndex: 12,
    position: 'absolute',
    bottom: 0,
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    backgroundColor: 'rgba(17,16,20,0.9)'
  },
  divide: {
    width: '100%',
    height: 1,
    backgroundColor: '#FFFFFF',
    opacity: 0.1
  },
  cancelButton: {
    width: '100%',
    height: 50,
    alignItems: 'center',
    justifyContent: 'center'
  },
  cancelText: {
    fontSize: 14,
    color: '#fff'
  },
  removeButton: {
    height: 50,
    alignItems: 'center',
    justifyContent: 'center'
  },
  removeText: {
    fontSize: 14,
    color: '#fff'
  }
});
//# sourceMappingURL=ZegoCoHostMenuDialog.js.map