"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZegoLiveStreamingMemberList;
var _react = _interopRequireWildcard(require("react"));
var _zegoUikitRn = _interopRequireWildcard(require("@zegocloud/zego-uikit-rn"));
var _reactNative = require("react-native");
var _utils = require("../utils");
var _defines = require("../services/defines");
var _ZegoAgreeCoHostButton = _interopRequireDefault(require("./ZegoAgreeCoHostButton"));
var _ZegoDisagreeCoHostButton = _interopRequireDefault(require("./ZegoDisagreeCoHostButton"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ZegoLiveStreamingMemberList(props) {
  const {
    isPluginsInit,
    showMicrophoneState,
    showCameraState,
    itemBuilder,
    onCloseMemberList,
    memberConnectStateMap,
    hostID,
    memberCount,
    onCoHostDisagree,
    onCoHostAgree,
    onConnectStateChanged,
    setIsToastVisable,
    setToastExtendedData,
    setIsCoHostDialogVisable,
    setCoHostDialogExtendedData
  } = props;
  console.log('#######ZegoLiveStreamingMemberList', memberConnectStateMap);
  const maxWidthLimit1 = 140; // Anchor interface with buttons
  const maxWidthLimit2 = 250; // Non-anchor interface and no buttons
  const localUserID = _zegoUikitRn.default.getLocalUserInfo().userID;

  // Determine whether you are the host and whether the current member has sent a cohost request
  const showOperationButton = userID => {
    return localUserID === hostID && memberConnectStateMap[userID] === _defines.ZegoCoHostConnectState.connecting;
  };
  const showOperationIcon = userID => {
    return isPluginsInit && localUserID === hostID && userID !== localUserID && memberConnectStateMap[userID] !== _defines.ZegoCoHostConnectState.connecting;
  };
  const operateHandle = userID => {
    onCloseMemberList();
    setIsCoHostDialogVisable(true);
    if (memberConnectStateMap[userID] === _defines.ZegoCoHostConnectState.connected) {
      // You can force prohibit to connect
      setCoHostDialogExtendedData({
        inviteeID: userID,
        invitationType: _defines.ZegoInvitationType.removeCoHost,
        onOk: () => {
          setIsCoHostDialogVisable(false);
          onConnectStateChanged(userID, _defines.ZegoCoHostConnectState.idle);
        },
        onCancel: () => {
          setIsCoHostDialogVisable(false);
        }
      });
    } else {
      // You can invite to cohost
      setCoHostDialogExtendedData({
        inviteeID: userID,
        invitationType: _defines.ZegoInvitationType.inviteToCoHost,
        onOk: () => {
          setIsCoHostDialogVisable(false);
          setIsToastVisable(true);
          setToastExtendedData({
            type: _defines.ZegoToastType.success,
            text: _defines.ZegoTranslationText.inviteCoHostSuccessfullyToast
          });
        },
        onCancel: () => {
          setIsCoHostDialogVisable(false);
        }
      });
    }
  };
  const roleDescription = item => {
    console.log('#######roleDescription', item, memberConnectStateMap);
    item.connectState = memberConnectStateMap[item.userID];
    const showMe = item.userID === localUserID ? 'You' : '';
    let roleName = item.userID === hostID ? 'Host' : item.connectState === _defines.ZegoCoHostConnectState.connected ? 'Co-host' : '';
    if (!showMe) {
      return `${roleName ? '(' + roleName + ')' : ''}`;
    } else {
      return `(${showMe + (roleName ? ',' + roleName : '')})`;
    }
  };
  const sortUserList = userList => {
    const hostArr = [],
      speakerArr = [],
      willSpeakerArr = [],
      audienceArr = [];
    userList.forEach(item => {
      if (item.userID === hostID) {
        if (item.userID === localUserID) {
          hostArr.unshift(item);
        } else {
          hostArr.push(item);
        }
      } else if (memberConnectStateMap[item.userID] === _defines.ZegoCoHostConnectState.connected) {
        if (item.userID === localUserID) {
          speakerArr.unshift(item);
        } else {
          speakerArr.push(item);
        }
      } else if (memberConnectStateMap[item.userID] === _defines.ZegoCoHostConnectState.connecting) {
        if (item.userID === localUserID) {
          willSpeakerArr.unshift(item);
        } else {
          willSpeakerArr.push(item);
        }
      } else {
        if (item.userID === localUserID) {
          // LocalUser is audience, sort after hostArr
          speakerArr.unshift(item);
        } else {
          audienceArr.push(item);
        }
      }
    });
    const allArr = hostArr.concat(speakerArr, willSpeakerArr, audienceArr);
    return allArr;
  };
  const renderItem = _ref => {
    let {
      userInfo
    } = _ref;
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.memberItem
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.memberItemLeft
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.memberAvatar
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: styles.memberNameLabel
    }, (0, _utils.getShotName)(userInfo.userName))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.memberName, {
        maxWidth: showOperationButton(userInfo.userID) ? maxWidthLimit1 : maxWidthLimit2
      }]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      numberOfLines: 1,
      style: {
        fontSize: 16,
        color: '#FFFFFF'
      }
    }, userInfo.userName, roleDescription(userInfo)))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.memberItemRight
    }, showOperationButton(userInfo.userID) ? /*#__PURE__*/_react.default.createElement(_react.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: {
        marginRight: 6
      }
    }, /*#__PURE__*/_react.default.createElement(_ZegoDisagreeCoHostButton.default, {
      onPressed: onCoHostDisagree.bind(this, userInfo.userID),
      inviterID: userInfo.userID
    })), /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_ZegoAgreeCoHostButton.default, {
      onPressed: onCoHostAgree.bind(this, userInfo.userID),
      inviterID: userInfo.userID
    }))) : null,
    // @ts-ignore
    showOperationIcon(userInfo.userID) ? /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
      onPress: operateHandle.bind(this, userInfo.userID)
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
      source: require('../resources/icon_more_vertical.png')
    })) : null));
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.header
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableWithoutFeedback, {
    onPress: onCloseMemberList
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, {
    style: styles.downArrowIcon,
    source: require('../resources/white_button_back.png')
  })), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: styles.title
  }, _defines.ZegoTranslationText.memberListTitle, " \xB7 ", memberCount, "\u4EBA")), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.divide
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.memberListContainer
  }, /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoMemberList, {
    showMicrophoneState: showMicrophoneState,
    showCameraState: showCameraState,
    itemBuilder: itemBuilder || renderItem,
    sortUserList: sortUserList
  })));
}
const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden',
    borderTopLeftRadius: 16,
    borderTopRightRadius: 16,
    backgroundColor: 'rgba(34,34,34,0.8)',
    width: '100%',
    height: 571,
    zIndex: 12,
    position: 'absolute',
    bottom: 0,
    flexDirection: 'column'
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    height: 43
  },
  downArrowIcon: {
    marginLeft: 11.5,
    marginRight: 5
  },
  title: {
    fontSize: 18,
    color: '#FFFFFF'
  },
  divide: {
    width: '100%',
    height: 1,
    backgroundColor: '#FFFFFF',
    opacity: 0.15
  },
  memberListContainer: {
    flex: 1,
    paddingTop: 12,
    paddingBottom: 14
  },
  memberItem: {
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingLeft: 18,
    paddingRight: 17,
    height: 62
  },
  memberItemLeft: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  memberAvatar: {
    width: 36,
    height: 36,
    backgroundColor: '#DBDDE3',
    borderRadius: 1000,
    marginRight: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  memberNameLabel: {
    flex: 1,
    textAlign: 'center',
    color: '#222222',
    fontSize: 16
  },
  memberName: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  memberItemRight: {
    flexDirection: 'row',
    alignItems: 'center'
  }
});
//# sourceMappingURL=ZegoLiveStreamingMemberList.js.map