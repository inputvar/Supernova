"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ZegoUIKitPrebuiltLiveStreamingFloatingMinimizedView;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _zegoUikitRn = require("@zegocloud/zego-uikit-rn");
var _minimizing_helper = _interopRequireDefault(require("../services/minimizing_helper"));
var _logger = require("../utils/logger");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ZegoUIKitPrebuiltLiveStreamingFloatingMinimizedView(props) {
  const window = (0, _reactNative.useWindowDimensions)();
  const {
    width = 90,
    height = 160,
    borderRadius = 10,
    left = window.width / 2 || 100,
    top = 10,
    showSoundWaveInAudioMode = true
  } = props;
  const [isInit, setIsInit] = (0, _react.useState)(false);
  const [isVisable, setIsVisable] = (0, _react.useState)(false);
  const [layout, setLayout] = (0, _react.useState)({
    left,
    top
  });
  const [floatViewInfo, setFloatViewInfo] = (0, _react.useState)({
    width: 0,
    height: 0
  });
  const [activeUserID, setActiveUserID] = (0, _react.useState)('');
  const [isMoving, setIsMoving] = (0, _react.useState)(false);
  const panResponder = _reactNative.PanResponder.create({
    onStartShouldSetPanResponder: (evt, gestureState) => true,
    onMoveShouldSetPanResponder: (evt, gestureState) => true,
    onPanResponderGrant: (evt, gestureState) => {
      (0, _logger.zloginfo)('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] onPanResponderGrant gestureState', gestureState);
      setIsMoving(false);
    },
    onPanResponderMove: (evt, gestureState) => {
      // zloginfo('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] onPanResponderMove layout', layout);
      // zloginfo('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] onPanResponderMove gestureState', gestureState);
      if (Math.abs(gestureState.dx) < 5 && Math.abs(gestureState.dy) < 5 && !isMoving) {
        setIsMoving(false);
      } else {
        setIsMoving(true);
        const newLeft = layout.left + gestureState.dx;
        const newTop = layout.top + gestureState.dy;
        if (newLeft >= window.width - floatViewInfo.width || newTop >= window.height - floatViewInfo.height || newLeft <= 0 || newTop <= 0) return;
        setLayout({
          left: newLeft,
          top: newTop
        });
      }
    },
    onPanResponderEnd: (evt, gestureState) => {
      (0, _logger.zloginfo)('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] onPanResponderEnd layout', layout);
      (0, _logger.zloginfo)('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] onPanResponderEnd gestureState', gestureState);
    },
    onPanResponderRelease: () => {
      if (!isMoving) {
        // Click
        pressedHandle();
      }
      setIsMoving(false);
    }
  });
  const callbackID = 'ZegoMinimizeRoom' + String(Math.floor(Math.random() * 10000));
  const layoutHandle = (0, _react.useCallback)(e => {
    const {
      x,
      y,
      width,
      height
    } = e.nativeEvent.layout;
    (0, _logger.zloginfo)('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] layoutHandle', x, y, width, height);
    setFloatViewInfo({
      width,
      height
    });
  }, []);
  const pressedHandle = async () => {
    (0, _logger.zloginfo)('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] pressedHandle');
    _minimizing_helper.default.getInstance().notifyMaximize();
  };
  (0, _react.useEffect)(() => {
    _minimizing_helper.default.getInstance().onPrebuiltInit(callbackID, () => {
      (0, _logger.zloginfo)('[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] init success');
      setIsInit(true);
    });
    return () => {
      _minimizing_helper.default.getInstance().onPrebuiltInit(callbackID);
    };
  }, []);
  (0, _react.useEffect)(() => {
    if (isInit) {
      _minimizing_helper.default.getInstance().onWindowMinimized(callbackID, () => {
        setIsVisable(true);
        const initConfig = _minimizing_helper.default.getInstance().getInitConfig();
        const {
          onWindowMinimized
        } = initConfig;
        if (typeof onWindowMinimized === 'function') {
          onWindowMinimized();
          _minimizing_helper.default.getInstance().setIsMinimizeSwitch(true);
        }
      });
      _minimizing_helper.default.getInstance().onWindowMaximized(callbackID, () => {
        setIsVisable(false);
        const initConfig = _minimizing_helper.default.getInstance().getInitConfig();
        const {
          onWindowMaximized
        } = initConfig;
        if (typeof onWindowMaximized === 'function') {
          onWindowMaximized();
          _minimizing_helper.default.getInstance().setIsMinimizeSwitch(true);
        }
      });
      _minimizing_helper.default.getInstance().onEntryNormal(callbackID, () => {
        setIsVisable(false);
      });
      _minimizing_helper.default.getInstance().onActiveUserIDUpdate(callbackID, activeUserID => {
        // zloginfo(`[ZegoUIKitPrebuiltLiveAudioRoomFloatingMinimizedView] onActiveUserIDUpdate`, activeUserID);
        setActiveUserID(activeUserID);
      });
    }
    return () => {
      _minimizing_helper.default.getInstance().onWindowMinimized(callbackID);
      _minimizing_helper.default.getInstance().onWindowMaximized(callbackID);
      _minimizing_helper.default.getInstance().onEntryNormal(callbackID);
      _minimizing_helper.default.getInstance().onActiveUserIDUpdate(callbackID);
    };
  }, [isInit]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, _extends({
    style: [{
      position: 'absolute',
      left: layout.left,
      top: layout.top
    }, {
      display: isVisable ? 'flex' : 'none'
    }],
    onLayout: layoutHandle
  }, panResponder.panHandlers), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.floatAudioView, {
      width,
      height,
      borderRadius
    }]
  }, activeUserID ? /*#__PURE__*/_react.default.createElement(_zegoUikitRn.ZegoAudioVideoView, {
    key: activeUserID,
    userID: activeUserID,
    showSoundWave: showSoundWaveInAudioMode
  }) : /*#__PURE__*/_react.default.createElement(_reactNative.View, null)));
}
const styles = _reactNative.StyleSheet.create({
  floatAudioView: {
    overflow: 'hidden',
    zIndex: 10000,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 8
  }
});
//# sourceMappingURL=ZegoUIKitPrebuiltLiveStreamingFloatingMinimizedView.js.map