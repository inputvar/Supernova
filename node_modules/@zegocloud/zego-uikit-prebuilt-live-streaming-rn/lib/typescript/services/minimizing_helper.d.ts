/// <reference types="node" />
export default class MinimizingHelper {
    static _instance: MinimizingHelper;
    _isMinimize: boolean;
    _isMinimizeSwitch: boolean;
    _activeUserID: string;
    _onActiveUserIDUpdateCallbackMap: {
        [index: string]: (data?: any) => void;
    };
    _onWindowMinimizeCallbackMap: {
        [index: string]: (data?: any) => void;
    };
    _onWindowMaximizeCallbackMap: {
        [index: string]: (data?: any) => void;
    };
    _onEntryNormalCallbackMap: {
        [index: string]: (data?: any) => void;
    };
    _updateTimer: null | NodeJS.Timer;
    _appInfo: {
        appID?: number;
        appSign?: String;
    };
    _localUser: {
        userID?: string;
        userName?: string;
    };
    _roomID: string;
    _config: any;
    _plugins: any[];
    _onPrebuiltInitCallbackMap: {
        [index: string]: (data?: any) => void;
    };
    constructor();
    static getInstance(): MinimizingHelper;
    getIsMinimize(): boolean;
    setIsMinimizeSwitch(isMinimizeSwitch: boolean): void;
    getIsMinimizeSwitch(): boolean;
    setInitParams(appID: number, appSign: string, userID: string, userName: string, roomID: string, config?: {}): void;
    getInitAppInfo(): {
        appID?: number;
        appSign?: String;
    };
    getInitUser(): {
        userID?: string;
        userName?: string;
    };
    getInitRoomID(): string;
    getInitConfig(): any;
    getInitPlugins(): any[];
    minimizeWindow(): void;
    startUpdateTimer(): void;
    initUpdateTimer(): void;
    updateActiveUserIDByTimer(): void;
    registerAudioVideoListCallback(callbackID: string): void;
    unRegisterAudioVideoListCallback(callbackID: string): void;
    notifyPrebuiltInit(): void;
    notifyActiveUserIDUpdate(activeUserID: string): void;
    notifyMinimize(): void;
    notifyMaximize(): void;
    notifyEntryNormal(): void;
    onPrebuiltInit(callbackID: string, callback?: (data: any) => void): void;
    onActiveUserIDUpdate(callbackID: string, callback?: (data: any) => void): void;
    onWindowMinimized(callbackID: string, callback?: (data: any) => void): void;
    onWindowMaximized(callbackID: string, callback?: (data: any) => void): void;
    onEntryNormal(callbackID: string, callback?: (data: any) => void): void;
}
