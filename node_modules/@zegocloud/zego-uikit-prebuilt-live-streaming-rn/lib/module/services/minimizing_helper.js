function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import ZegoUIKit from '@zegocloud/zego-uikit-rn';
import PrebuiltHelper from "./prebuilt_helper";
export default class MinimizingHelper {
  constructor() {
    _defineProperty(this, "_isMinimize", false);
    _defineProperty(this, "_isMinimizeSwitch", false);
    _defineProperty(this, "_activeUserID", '');
    _defineProperty(this, "_onActiveUserIDUpdateCallbackMap", {});
    _defineProperty(this, "_onWindowMinimizeCallbackMap", {});
    _defineProperty(this, "_onWindowMaximizeCallbackMap", {});
    _defineProperty(this, "_onEntryNormalCallbackMap", {});
    _defineProperty(this, "_updateTimer", null);
    _defineProperty(this, "_appInfo", {});
    _defineProperty(this, "_localUser", {});
    _defineProperty(this, "_roomID", '');
    _defineProperty(this, "_config", {});
    _defineProperty(this, "_plugins", []);
    _defineProperty(this, "_onPrebuiltInitCallbackMap", {});
  }
  static getInstance() {
    return this._instance || (this._instance = new MinimizingHelper());
  }
  getIsMinimize() {
    return this._isMinimize;
  }
  setIsMinimizeSwitch(isMinimizeSwitch) {
    this._isMinimizeSwitch = !!isMinimizeSwitch;
  }
  getIsMinimizeSwitch() {
    return this._isMinimizeSwitch;
  }
  setInitParams(appID, appSign, userID, userName, roomID) {
    let config = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    this._appInfo = {
      appID,
      appSign
    };
    this._localUser = {
      userID,
      userName
    };
    this._roomID = roomID;
    Object.assign(this._config, config);
  }
  getInitAppInfo() {
    return this._appInfo;
  }
  getInitUser() {
    return this._localUser;
  }
  getInitRoomID() {
    return this._roomID;
  }
  getInitConfig() {
    return this._config;
  }
  getInitPlugins() {
    return this._plugins;
  }
  minimizeWindow() {
    const callbackID = 'MinimizingHelper' + String(Math.floor(Math.random() * 10000));
    this.unRegisterAudioVideoListCallback(callbackID);
    this.registerAudioVideoListCallback(callbackID);
    this.notifyMinimize();
    this.startUpdateTimer();
  }
  startUpdateTimer() {
    this.updateActiveUserIDByTimer();
    this.initUpdateTimer();
  }
  initUpdateTimer() {
    clearInterval(this._updateTimer);
    this._updateTimer = null;
  }
  updateActiveUserIDByTimer() {
    const activeUserID = PrebuiltHelper.getInstance().getRealTimeData().hostID;
    this._activeUserID = activeUserID || ZegoUIKit.getLocalUserInfo().userID || '';

    // console.log('[MinimizingHelper]updateActiveUserIDByTimer', this._activeUserID);
    this.notifyActiveUserIDUpdate(this._activeUserID);
  }
  registerAudioVideoListCallback(callbackID) {}
  unRegisterAudioVideoListCallback(callbackID) {}
  notifyPrebuiltInit() {
    Object.keys(this._onPrebuiltInitCallbackMap).forEach(callbackID => {
      if (this._onPrebuiltInitCallbackMap[callbackID]) {
        this._onPrebuiltInitCallbackMap[callbackID]();
      }
    });
  }
  notifyActiveUserIDUpdate(activeUserID) {
    Object.keys(this._onActiveUserIDUpdateCallbackMap).forEach(callbackID => {
      if (this._onActiveUserIDUpdateCallbackMap[callbackID]) {
        this._onActiveUserIDUpdateCallbackMap[callbackID](activeUserID);
      }
    });
  }
  notifyMinimize() {
    this._isMinimize = true;
    Object.keys(this._onWindowMinimizeCallbackMap).forEach(callbackID => {
      if (this._onWindowMinimizeCallbackMap[callbackID]) {
        this._onWindowMinimizeCallbackMap[callbackID]();
      }
    });
  }
  notifyMaximize() {
    this._isMinimize = false;
    Object.keys(this._onWindowMaximizeCallbackMap).forEach(callbackID => {
      if (this._onWindowMaximizeCallbackMap[callbackID]) {
        this._onWindowMaximizeCallbackMap[callbackID]();
      }
    });
  }
  notifyEntryNormal() {
    this._isMinimize = false;
    Object.keys(this._onEntryNormalCallbackMap).forEach(callbackID => {
      if (this._onEntryNormalCallbackMap[callbackID]) {
        this._onEntryNormalCallbackMap[callbackID]();
      }
    });
  }
  onPrebuiltInit(callbackID, callback) {
    if (typeof callback !== 'function') {
      delete this._onPrebuiltInitCallbackMap[callbackID];
    } else {
      this._onPrebuiltInitCallbackMap[callbackID] = callback;
    }
  }
  onActiveUserIDUpdate(callbackID, callback) {
    if (typeof callback !== 'function') {
      delete this._onActiveUserIDUpdateCallbackMap[callbackID];
    } else {
      this._onActiveUserIDUpdateCallbackMap[callbackID] = callback;
    }
  }
  onWindowMinimized(callbackID, callback) {
    if (typeof callback !== 'function') {
      delete this._onWindowMinimizeCallbackMap[callbackID];
    } else {
      this._onWindowMinimizeCallbackMap[callbackID] = callback;
    }
  }
  onWindowMaximized(callbackID, callback) {
    if (typeof callback !== 'function') {
      delete this._onWindowMaximizeCallbackMap[callbackID];
    } else {
      this._onWindowMaximizeCallbackMap[callbackID] = callback;
    }
  }
  onEntryNormal(callbackID, callback) {
    if (typeof callback !== 'function') {
      delete this._onEntryNormalCallbackMap[callbackID];
    } else {
      this._onEntryNormalCallbackMap[callbackID] = callback;
    }
  }
}
_defineProperty(MinimizingHelper, "_instance", void 0);
//# sourceMappingURL=minimizing_helper.js.map